{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nexport var Sound = function () {\n  function Sound() {\n    var _this = this;\n\n    _classCallCheck(this, Sound);\n\n    this._loaded = false;\n    this._loading = false;\n    this._key = null;\n    this._lastStatusUpdate = null;\n    this._lastStatusUpdateTime = null;\n    this._subscriptions = [];\n    this._eventEmitter = new EventEmitter(ExponentAV);\n    this._coalesceStatusUpdatesInMillis = 100;\n    this._onPlaybackStatusUpdate = null;\n\n    this._internalStatusUpdateCallback = function (_ref) {\n      var key = _ref.key,\n          status = _ref.status;\n\n      if (_this._key === key) {\n        _this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n\n    this._internalErrorCallback = function (_ref2) {\n      var key = _ref2.key,\n          error = _ref2.error;\n\n      if (_this._key === key) {\n        _this._errorCallback(error);\n      }\n    };\n\n    this._errorCallback = function (error) {\n      _this._clearSubscriptions();\n\n      _this._loaded = false;\n      _this._key = null;\n\n      _this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    };\n\n    this.getStatusAsync = function _callee() {\n      var status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!_this._loaded) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.getStatusForSound(_this._key);\n              }));\n\n            case 2:\n              status = getUnloadedStatus();\n\n              _this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n              return _context.abrupt(\"return\", status);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n\n  _createClass(Sound, [{\n    key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n    value: function _callOnPlaybackStatusUpdateForNewStatus(status) {\n      var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n      if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n        this._onPlaybackStatusUpdate(status);\n\n        this._lastStatusUpdateTime = new Date();\n        this._lastStatusUpdate = JSON.stringify(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function _performOperationAndHandleStatusAsync(operation) {\n      var status;\n      return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              throwIfAudioIsDisabled();\n\n              if (!this._loaded) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(operation());\n\n            case 4:\n              status = _context2.sent;\n\n              this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n              return _context2.abrupt(\"return\", status);\n\n            case 9:\n              throw new Error('Cannot complete operation because sound is not loaded.');\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_subscribeToNativeEvents\",\n    value: function _subscribeToNativeEvents() {\n      if (this._loaded) {\n        this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));\n\n        this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n      }\n    }\n  }, {\n    key: \"_clearSubscriptions\",\n    value: function _clearSubscriptions() {\n      this._subscriptions.forEach(function (e) {\n        return e.remove();\n      });\n\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"loadAsync\",\n    value: function loadAsync(source) {\n      var _this2 = this;\n\n      var initialStatus,\n          downloadFirst,\n          _await$getNativeSourc,\n          nativeSource,\n          fullInitialStatus,\n          _args3 = arguments;\n\n      return _regeneratorRuntime.async(function loadAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              initialStatus = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n              downloadFirst = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n              throwIfAudioIsDisabled();\n\n              if (!this._loading) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error('The Sound is already loading.');\n\n            case 5:\n              if (this._loaded) {\n                _context3.next = 15;\n                break;\n              }\n\n              this._loading = true;\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n\n            case 9:\n              _await$getNativeSourc = _context3.sent;\n              nativeSource = _await$getNativeSourc.nativeSource;\n              fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n              return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var loadSuccess = function loadSuccess(result) {\n                  var _result = _slicedToArray(result, 2),\n                      key = _result[0],\n                      status = _result[1];\n\n                  _this2._key = key;\n                  _this2._loaded = true;\n                  _this2._loading = false;\n\n                  _this2._subscribeToNativeEvents();\n\n                  _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                  resolve(status);\n                };\n\n                var loadError = function loadError(error) {\n                  _this2._loading = false;\n                  reject(error);\n                };\n\n                ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n              }));\n\n            case 15:\n              throw new Error('The Sound is already loaded.');\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"unloadAsync\",\n    value: function unloadAsync() {\n      var key, status;\n      return _regeneratorRuntime.async(function unloadAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this._loaded) {\n                _context4.next = 12;\n                break;\n              }\n\n              this._loaded = false;\n              key = this._key;\n              this._key = null;\n              _context4.next = 6;\n              return _regeneratorRuntime.awrap(ExponentAV.unloadForSound(key));\n\n            case 6:\n              status = _context4.sent;\n\n              this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n              this._clearSubscriptions();\n\n              return _context4.abrupt(\"return\", status);\n\n            case 12:\n              return _context4.abrupt(\"return\", this.getStatusAsync());\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setStatusAsync\",\n    value: function setStatusAsync(status) {\n      var _this3 = this;\n\n      return _regeneratorRuntime.async(function setStatusAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              assertStatusValuesInBounds(status);\n              return _context5.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.setStatusForSound(_this3._key, status);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"replayAsync\",\n    value: function replayAsync() {\n      var _this4 = this;\n\n      var status,\n          _args6 = arguments;\n      return _regeneratorRuntime.async(function replayAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              status = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n\n              if (!(status.positionMillis && status.positionMillis !== 0)) {\n                _context6.next = 3;\n                break;\n              }\n\n              throw new Error('Requested position after replay has to be 0.');\n\n            case 3:\n              return _context6.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.replaySound(_this4._key, _objectSpread(_objectSpread({}, status), {}, {\n                  positionMillis: 0,\n                  shouldPlay: true\n                }));\n              }));\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Sound;\n}();\n\nSound.create = function _callee2(source) {\n  var initialStatus,\n      onPlaybackStatusUpdate,\n      downloadFirst,\n      _args7 = arguments;\n  return _regeneratorRuntime.async(function _callee2$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n          onPlaybackStatusUpdate = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : null;\n          downloadFirst = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : true;\n          console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n          return _context7.abrupt(\"return\", Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst));\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nSound.createAsync = function _callee3(source) {\n  var initialStatus,\n      onPlaybackStatusUpdate,\n      downloadFirst,\n      sound,\n      status,\n      _args8 = arguments;\n  return _regeneratorRuntime.async(function _callee3$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          initialStatus = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n          onPlaybackStatusUpdate = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : null;\n          downloadFirst = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : true;\n          sound = new Sound();\n          sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n          _context8.next = 7;\n          return _regeneratorRuntime.awrap(sound.loadAsync(source, initialStatus, downloadFirst));\n\n        case 7:\n          status = _context8.sent;\n          return _context8.abrupt(\"return\", {\n            sound: sound,\n            status: status\n          });\n\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\n_extends(Sound.prototype, PlaybackMixin);","map":{"version":3,"sources":["../../src/Audio/Sound.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAS,YAAT,QAA6B,kBAA7B;AACA,SAAS,sBAAT;AACA,SAEE,aAFF,EAME,0BANF,EAOE,+CAPF,EAQE,iBARF;AAWA,OAAO,UAAP;AAGA,WAAa,KAAb;AAAA,mBAAA;AAAA;;AAAA;;AACE,SAAA,OAAA,GAAmB,KAAnB;AACA,SAAA,QAAA,GAAoB,KAApB;AACA,SAAA,IAAA,GAAsB,IAAtB;AACA,SAAA,iBAAA,GAAmC,IAAnC;AACA,SAAA,qBAAA,GAAqC,IAArC;AACA,SAAA,cAAA,GAAgD,EAAhD;AACA,SAAA,aAAA,GAA8B,IAAI,YAAJ,CAAiB,UAAjB,CAA9B;AACA,SAAA,8BAAA,GAAyC,GAAzC;AACA,SAAA,uBAAA,GAAqE,IAArE;;AAsDA,SAAA,6BAAA,GAAgC,gBAM3B;AAAA,UALH,GAKG,QALH,GAKG;AAAA,UAJH,MAIG,QAJH,MAIG;;AACH,UAAI,KAAI,CAAC,IAAL,KAAc,GAAlB,EAAuB;AACrB,QAAA,KAAI,CAAC,uCAAL,CAA6C,MAA7C;AACD;AACF,KAVD;;AAYA,SAAA,sBAAA,GAAyB,iBAA0D;AAAA,UAAvD,GAAuD,SAAvD,GAAuD;AAAA,UAAlD,KAAkD,SAAlD,KAAkD;;AACjF,UAAI,KAAI,CAAC,IAAL,KAAc,GAAlB,EAAuB;AACrB,QAAA,KAAI,CAAC,cAAL,CAAoB,KAApB;AACD;AACF,KAJD;;AA2BA,SAAA,cAAA,GAAiB,UAAC,KAAD,EAAkB;AACjC,MAAA,KAAI,CAAC,mBAAL;;AACA,MAAA,KAAI,CAAC,OAAL,GAAe,KAAf;AACA,MAAA,KAAI,CAAC,IAAL,GAAY,IAAZ;;AACA,MAAA,KAAI,CAAC,uCAAL,CAA6C,iBAAiB,CAAC,KAAD,CAA9D;AACD,KALD;;AAYA,SAAA,cAAA,GAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACX,KAAI,CAAC,OADM;AAAA;AAAA;AAAA;;AAAA,+CAEN,KAAI,CAAC,qCAAL,CAA2C;AAAA,uBAChD,UAAU,CAAC,iBAAX,CAA6B,KAAI,CAAC,IAAlC,CADgD;AAAA,eAA3C,CAFM;;AAAA;AAMT,cAAA,MANS,GAMgB,iBAAiB,EANjC;;AAOf,cAAA,KAAI,CAAC,uCAAL,CAA6C,MAA7C;;AAPe,+CAQR,MARQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;AA6HD;;AA/OD;AAAA;AAAA,WAqCE,iDAAwC,MAAxC,EAA8D;AAC5D,UAAM,8BAA8B,GAClC,KAAK,qBAAL,IACA,IAAI,CAAC,SAAL,CAAe,MAAf,MAA2B,KAAK,iBADhC,IAEA,IAAI,CAAC,GAAL,KAAa,KAAK,qBAAL,CAA2B,OAA3B,EAAb,GAAoD,KAAK,8BAH3D;;AAKA,UAAI,KAAK,uBAAL,IAAgC,IAAhC,IAAwC,CAAC,8BAA7C,EAA6E;AAC3E,aAAK,uBAAL,CAA6B,MAA7B;;AACA,aAAK,qBAAL,GAA6B,IAAI,IAAJ,EAA7B;AACA,aAAK,iBAAL,GAAyB,IAAI,CAAC,SAAL,CAAe,MAAf,CAAzB;AACD;AACF;AAhDH;AAAA;AAAA,WAkDE,+CACE,SADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,cAAA,sBAAsB;;AAHxB,mBAIM,KAAK,OAJX;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAKyB,SAAS,EALlC;;AAAA;AAKU,cAAA,MALV;;AAMI,mBAAK,uCAAL,CAA6C,MAA7C;;AANJ,gDAOW,MAPX;;AAAA;AAAA,oBASU,IAAI,KAAJ,CAAU,wDAAV,CATV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlDF;AAAA;AAAA,WAkFE,oCAAwB;AACtB,UAAI,KAAK,OAAT,EAAkB;AAChB,aAAK,cAAL,CAAoB,IAApB,CACE,KAAK,aAAL,CAAmB,WAAnB,CACE,yBADF,EAEE,KAAK,6BAFP,CADF;;AAOA,aAAK,cAAL,CAAoB,IAApB,CACE,KAAK,aAAL,CAAmB,WAAnB,CAA+B,oBAA/B,EAAqD,KAAK,sBAA1D,CADF;AAGD;AACF;AA/FH;AAAA;AAAA,WAiGE,+BAAmB;AACjB,WAAK,cAAL,CAAoB,OAApB,CAA4B,UAAA,CAAC;AAAA,eAAI,CAAC,CAAC,MAAF,EAAJ;AAAA,OAA7B;;AACA,WAAK,cAAL,GAAsB,EAAtB;AACD;AApGH;AAAA;AAAA,WA6HE,mCAA0B,sBAA1B,EAA2F;AACzF,WAAK,uBAAL,GAA+B,sBAA/B;AACA,WAAK,cAAL;AACD;AAhIH;AAAA;AAAA,WAoIE,mBACE,MADF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEE,cAAA,aAFF,8DAEuC,EAFvC;AAGE,cAAA,aAHF,8DAG2B,IAH3B;AAKE,cAAA,sBAAsB;;AALxB,mBAMM,KAAK,QANX;AAAA;AAAA;AAAA;;AAAA,oBAOU,IAAI,KAAJ,CAAU,+BAAV,CAPV;;AAAA;AAAA,kBASO,KAAK,OATZ;AAAA;AAAA;AAAA;;AAUI,mBAAK,QAAL,GAAgB,IAAhB;AAVJ;AAAA,+CAec,+CAA+C,CACvD,MADuD,EAEvD,aAFuD,EAGvD,aAHuD,CAf7D;;AAAA;AAAA;AAaM,cAAA,YAbN,yBAaM,YAbN;AAcM,cAAA,iBAdN,yBAcM,iBAdN;AAAA,gDAsBW,IAAI,OAAJ,CAA4B,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrD,oBAAM,WAAW,GAAG,SAAd,WAAc,CAAC,MAAD,EAA4C;AAAA,+CACxC,MADwC;AAAA,sBACvD,GADuD;AAAA,sBAClD,MADkD;;AAE9D,kBAAA,MAAI,CAAC,IAAL,GAAY,GAAZ;AACA,kBAAA,MAAI,CAAC,OAAL,GAAe,IAAf;AACA,kBAAA,MAAI,CAAC,QAAL,GAAgB,KAAhB;;AACA,kBAAA,MAAI,CAAC,wBAAL;;AACA,kBAAA,MAAI,CAAC,uCAAL,CAA6C,MAA7C;;AACA,kBAAA,OAAO,CAAC,MAAD,CAAP;AACD,iBARD;;AAUA,oBAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,KAAD,EAAiB;AACjC,kBAAA,MAAI,CAAC,QAAL,GAAgB,KAAhB;AACA,kBAAA,MAAM,CAAC,KAAD,CAAN;AACD,iBAHD;;AAKA,gBAAA,UAAU,CAAC,YAAX,CAAwB,YAAxB,EAAsC,iBAAtC,EACG,IADH,CACQ,WADR,EAEG,KAFH,CAES,SAFT;AAGD,eAnBM,CAtBX;;AAAA;AAAA,oBA2CU,IAAI,KAAJ,CAAU,8BAAV,CA3CV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApIF;AAAA;AAAA,WAmLE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACM,KAAK,OADX;AAAA;AAAA;AAAA;;AAEI,mBAAK,OAAL,GAAe,KAAf;AACM,cAAA,GAHV,GAGgB,KAAK,IAHrB;AAII,mBAAK,IAAL,GAAY,IAAZ;AAJJ;AAAA,+CAKyB,UAAU,CAAC,cAAX,CAA0B,GAA1B,CALzB;;AAAA;AAKU,cAAA,MALV;;AAMI,mBAAK,uCAAL,CAA6C,MAA7C;;AACA,mBAAK,mBAAL;;AAPJ,gDAQW,MARX;;AAAA;AAAA,gDAUW,KAAK,cAAL,EAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnLF;AAAA;AAAA,WAmME,wBAAqB,MAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACE,cAAA,0BAA0B,CAAC,MAAD,CAA1B;AADF,gDAES,KAAK,qCAAL,CAA2C;AAAA,uBAChD,UAAU,CAAC,iBAAX,CAA6B,MAAI,CAAC,IAAlC,EAAwC,MAAxC,CADgD;AAAA,eAA3C,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnMF;AAAA;AAAA,WA0ME;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB,cAAA,MAAlB,8DAAgD,EAAhD;;AAAA,oBACM,MAAM,CAAC,cAAP,IAAyB,MAAM,CAAC,cAAP,KAA0B,CADzD;AAAA;AAAA;AAAA;;AAAA,oBAEU,IAAI,KAAJ,CAAU,8CAAV,CAFV;;AAAA;AAAA,gDAKS,KAAK,qCAAL,CAA2C;AAAA,uBAChD,UAAU,CAAC,WAAX,CAAuB,MAAI,CAAC,IAA5B,kCACK,MADL;AAEE,kBAAA,cAAc,EAAE,CAFlB;AAGE,kBAAA,UAAU,EAAE;AAHd,mBADgD;AAAA,eAA3C,CALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1MF;;AAAA;AAAA;;AAWS,KAAA,CAAA,MAAA,GAAS,kBACd,MADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEd,UAAA,aAFc,8DAEuB,EAFvB;AAGd,UAAA,sBAHc,8DAGsD,IAHtD;AAId,UAAA,aAJc,8DAIW,IAJX;AAMd,UAAA,OAAO,CAAC,IAAR;AANc,4CASP,KAAK,CAAC,WAAN,CAAkB,MAAlB,EAA0B,aAA1B,EAAyC,sBAAzC,EAAiE,aAAjE,CATO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAT;;AAYA,KAAA,CAAA,WAAA,GAAc,kBACnB,MADmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnB,UAAA,aAFmB,8DAEkB,EAFlB;AAGnB,UAAA,sBAHmB,8DAGiD,IAHjD;AAInB,UAAA,aAJmB,8DAIM,IAJN;AAMb,UAAA,KANa,GAME,IAAI,KAAJ,EANF;AAOnB,UAAA,KAAK,CAAC,yBAAN,CAAgC,sBAAhC;AAPmB;AAAA,2CAQkB,KAAK,CAAC,SAAN,CAAgB,MAAhB,EAAwB,aAAxB,EAAuC,aAAvC,CARlB;;AAAA;AAQb,UAAA,MARa;AAAA,4CASZ;AAAE,YAAA,KAAK,EAAL,KAAF;AAAS,YAAA,MAAM,EAAN;AAAT,WATY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AA0NT,SAAc,KAAK,CAAC,SAApB,EAA+B,aAA/B","sourcesContent":["import { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  Playback,\n  PlaybackMixin,\n  PlaybackSource,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\n\ntype AudioInstance = number | HTMLMediaElement | null;\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: Array<{ remove: () => void }> = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null;\n\n  static create = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  static createAsync = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: PlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: PlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<PlaybackStatus>\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: PlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        )\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<PlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: PlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const {\n        nativeSource,\n        fullInitialStatus,\n      } = await getNativeSourceAndFullInitialStatusForLoadAsync(\n        source,\n        initialStatus,\n        downloadFirst\n      );\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<PlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, PlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus)\n          .then(loadSuccess)\n          .catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<PlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: PlaybackStatusToSet): Promise<PlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: PlaybackStatusToSet = {}): Promise<PlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<PlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  pauseAsync!: () => Promise<PlaybackStatus>;\n  stopAsync!: () => Promise<PlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<PlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<PlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<PlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<PlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nexport function fontFamilyNeedsScoping(name) {\n  return false;\n}\n\nfunction isAsset(asset) {\n  return typeof asset === 'object' && 'uri' in asset && 'name' in asset;\n}\n\nexport function getAssetForSource(source) {\n  if (isAsset(source)) {\n    return {\n      uri: source.uri || source.localUri\n    };\n  }\n\n  if (typeof source !== 'string') {\n    throw new Error(\"Unexpected type \" + typeof source + \" expected a URI string or Asset from expo-asset.\");\n  }\n\n  return {\n    uri: source\n  };\n}\nexport function loadSingleFontAsync(name, input) {\n  var asset;\n  return _regeneratorRuntime.async(function loadSingleFontAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          asset = input;\n\n          if (!asset.downloadAsync) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new Error('expo-font: loadSingleFontAsync expected an asset of type FontResource on web');\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name, input));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"sources":["../src/FontLoader.web.ts"],"names":[],"mappings":";AACA,OAAO,cAAP;AAGA,OAAM,SAAU,sBAAV,CAAiC,IAAjC,EAA6C;AACjD,SAAO,KAAP;AACD;;AAED,SAAS,OAAT,CAAiB,KAAjB,EAA2B;AACzB,SAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,SAAS,KAAtC,IAA+C,UAAU,KAAhE;AACD;;AAED,OAAM,SAAU,iBAAV,CAA4B,MAA5B,EAA8C;AAClD,MAAI,OAAO,CAAC,MAAD,CAAX,EAAqB;AACnB,WAAO;AACL,MAAA,GAAG,EAAE,MAAM,CAAC,GAAP,IAAc,MAAM,CAAC;AADrB,KAAP;AAGD;;AAED,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAM,IAAI,KAAJ,sBACe,OAAO,MADtB,sDAAN;AAGD;;AAED,SAAO;AACL,IAAA,GAAG,EAAE;AADA,GAAP;AAGD;AAED,OAAO,SAAe,mBAAf,CACL,IADK,EAEL,KAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,UAAA,KAJD,GAIS,KAJT;;AAAA,eAKD,KAAK,CAAC,aALL;AAAA;AAAA;AAAA;;AAAA,gBAMG,IAAI,KAAJ,CAAU,8EAAV,CANH;;AAAA;AAAA;AAAA,2CASC,cAAc,CAAC,SAAf,CAAyB,IAAzB,EAA+B,KAA/B,CATD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAwC;AAC5C,SAAO,IAAP;AACD","sourcesContent":["import { Asset } from 'expo-asset';\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontSource, FontResource } from './Font.types';\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nfunction isAsset(asset: any): asset is Asset {\n  return typeof asset === 'object' && 'uri' in asset && 'name' in asset;\n}\n\nexport function getAssetForSource(source: FontSource): FontResource {\n  if (isAsset(source)) {\n    return {\n      uri: source.uri || source.localUri!,\n    };\n  }\n\n  if (typeof source !== 'string') {\n    throw new Error(\n      `Unexpected type ${typeof source} expected a URI string or Asset from expo-asset.`\n    );\n  }\n\n  return {\n    uri: source,\n  };\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  const asset = input as any;\n  if (asset.downloadAsync) {\n    throw new Error('expo-font: loadSingleFontAsync expected an asset of type FontResource on web');\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
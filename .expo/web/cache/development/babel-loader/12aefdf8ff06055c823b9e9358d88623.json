{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var IS_MANAGED_ENV = false;\nexport var manifestBaseUrl = null;\nexport function downloadAsync(uri, hash, type, name) {\n  return _regeneratorRuntime.async(function downloadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", uri);\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getManifest() {\n  return {};\n}","map":{"version":3,"sources":["../src/PlatformUtils.web.ts"],"names":[],"mappings":";AAAA,OAAO,IAAM,cAAc,GAAG,KAAvB;AAGP,OAAO,IAAM,eAAe,GAAG,IAAxB;AAEP,OAAO,SAAe,aAAf,CAA6B,GAA7B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,2CACE,GADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAM,SAAU,WAAV,GAAqB;AACzB,SAAO,EAAP;AACD","sourcesContent":["export const IS_MANAGED_ENV = false;\n\n// Compute manifest base URL if available\nexport const manifestBaseUrl = null;\n\nexport async function downloadAsync(uri, hash, type, name): Promise<string> {\n  return uri;\n}\n\nexport function getManifest() {\n  return {};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
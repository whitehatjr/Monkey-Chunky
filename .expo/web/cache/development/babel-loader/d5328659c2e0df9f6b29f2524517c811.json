{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, Platform } from '@unimodules/core';\nimport { PermissionStatus } from 'unimodules-permissions-interface';\nimport { _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nimport { isAudioEnabled, throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { Sound } from \"./Sound\";\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;\nexport var RECORDING_OPTIONS_PRESET_HIGH_QUALITY = {\n  android: {\n    extension: '.m4a',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false\n  }\n};\nexport var RECORDING_OPTIONS_PRESET_LOW_QUALITY = {\n  android: {\n    extension: '.3gp',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false\n  }\n};\nexport { PermissionStatus };\nvar _recorderExists = false;\nvar eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\nexport function getPermissionsAsync() {\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", ExponentAV.getPermissionsAsync());\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", ExponentAV.requestPermissionsAsync());\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var Recording = function () {\n  function Recording() {\n    var _this = this;\n\n    _classCallCheck(this, Recording);\n\n    this._subscription = null;\n    this._canRecord = false;\n    this._isDoneRecording = false;\n    this._finalDurationMillis = 0;\n    this._uri = null;\n    this._onRecordingStatusUpdate = null;\n    this._progressUpdateTimeoutVariable = null;\n    this._progressUpdateIntervalMillis = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n    this._options = null;\n\n    this._cleanupForUnloadedRecorder = function _callee(finalStatus) {\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this._canRecord = false;\n              _this._isDoneRecording = true;\n              _this._finalDurationMillis = finalStatus.durationMillis;\n              _recorderExists = false;\n\n              if (_this._subscription) {\n                _this._subscription.remove();\n\n                _this._subscription = null;\n              }\n\n              _this._disablePolling();\n\n              _context3.next = 8;\n              return _regeneratorRuntime.awrap(_this.getStatusAsync());\n\n            case 8:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this._pollingLoop = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(isAudioEnabled() && _this._canRecord && _this._onRecordingStatusUpdate != null)) {\n                _context4.next = 10;\n                break;\n              }\n\n              _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n              _context4.prev = 2;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(_this.getStatusAsync());\n\n            case 5:\n              _context4.next = 10;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](2);\n\n              _this._disablePolling();\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[2, 7]], Promise);\n    };\n\n    this.getStatusAsync = function _callee3() {\n      var status;\n      return _regeneratorRuntime.async(function _callee3$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!_this._canRecord) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.getAudioRecordingStatus();\n              }));\n\n            case 2:\n              status = {\n                canRecord: false,\n                isRecording: false,\n                isDoneRecording: _this._isDoneRecording,\n                durationMillis: _this._finalDurationMillis\n              };\n\n              _this._callOnRecordingStatusUpdateForNewStatus(status);\n\n              return _context5.abrupt(\"return\", status);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n\n  _createClass(Recording, [{\n    key: \"_disablePolling\",\n    value: function _disablePolling() {\n      if (this._progressUpdateTimeoutVariable != null) {\n        clearTimeout(this._progressUpdateTimeoutVariable);\n        this._progressUpdateTimeoutVariable = null;\n      }\n    }\n  }, {\n    key: \"_enablePollingIfNecessaryAndPossible\",\n    value: function _enablePollingIfNecessaryAndPossible() {\n      if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n        this._disablePolling();\n\n        this._pollingLoop();\n      }\n    }\n  }, {\n    key: \"_callOnRecordingStatusUpdateForNewStatus\",\n    value: function _callOnRecordingStatusUpdateForNewStatus(status) {\n      if (this._onRecordingStatusUpdate != null) {\n        this._onRecordingStatusUpdate(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function _performOperationAndHandleStatusAsync(operation) {\n      var status;\n      return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              throwIfAudioIsDisabled();\n\n              if (!this._canRecord) {\n                _context6.next = 9;\n                break;\n              }\n\n              _context6.next = 4;\n              return _regeneratorRuntime.awrap(operation());\n\n            case 4:\n              status = _context6.sent;\n\n              this._callOnRecordingStatusUpdateForNewStatus(status);\n\n              return _context6.abrupt(\"return\", status);\n\n            case 9:\n              throw new Error('Cannot complete operation because this recorder is not ready to record.');\n\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setOnRecordingStatusUpdate\",\n    value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n      this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n\n      if (onRecordingStatusUpdate == null) {\n        this._disablePolling();\n      } else {\n        this._enablePollingIfNecessaryAndPossible();\n      }\n\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"setProgressUpdateInterval\",\n    value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {\n      this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"prepareToRecordAsync\",\n    value: function prepareToRecordAsync() {\n      var options,\n          extensionRegex,\n          _await$ExponentAV$pre,\n          uri,\n          status,\n          currentStatus,\n          _args7 = arguments;\n\n      return _regeneratorRuntime.async(function prepareToRecordAsync$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;\n              throwIfAudioIsDisabled();\n\n              if (!_recorderExists) {\n                _context7.next = 4;\n                break;\n              }\n\n              throw new Error('Only one Recording object can be prepared at a given time.');\n\n            case 4:\n              if (!this._isDoneRecording) {\n                _context7.next = 6;\n                break;\n              }\n\n              throw new Error('This Recording object is done recording; you must make a new one.');\n\n            case 6:\n              if (!(!options || !options.android || !options.ios)) {\n                _context7.next = 8;\n                break;\n              }\n\n              throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n\n            case 8:\n              extensionRegex = /^\\.\\w+$/;\n\n              if (!(!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension))) {\n                _context7.next = 11;\n                break;\n              }\n\n              throw new Error(\"Your file extensions must match \" + extensionRegex.toString() + \".\");\n\n            case 11:\n              if (this._canRecord) {\n                _context7.next = 28;\n                break;\n              }\n\n              if (eventEmitter) {\n                this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n              }\n\n              _context7.next = 15;\n              return _regeneratorRuntime.awrap(ExponentAV.prepareAudioRecorder(options));\n\n            case 15:\n              _await$ExponentAV$pre = _context7.sent;\n              uri = _await$ExponentAV$pre.uri;\n              status = _await$ExponentAV$pre.status;\n              _recorderExists = true;\n              this._uri = uri;\n              this._options = options;\n              this._canRecord = true;\n              currentStatus = _objectSpread(_objectSpread({}, status), {}, {\n                canRecord: true\n              });\n\n              this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n\n              this._enablePollingIfNecessaryAndPossible();\n\n              return _context7.abrupt(\"return\", currentStatus);\n\n            case 28:\n              throw new Error('This Recording object is already prepared to record.');\n\n            case 29:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"startAsync\",\n    value: function startAsync() {\n      return _regeneratorRuntime.async(function startAsync$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.startAudioRecording();\n              }));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pauseAsync\",\n    value: function pauseAsync() {\n      return _regeneratorRuntime.async(function pauseAsync$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.pauseAudioRecording();\n              }));\n\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"stopAndUnloadAsync\",\n    value: function stopAndUnloadAsync() {\n      var finalStatus;\n      return _regeneratorRuntime.async(function stopAndUnloadAsync$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (this._canRecord) {\n                _context10.next = 6;\n                break;\n              }\n\n              if (!this._isDoneRecording) {\n                _context10.next = 5;\n                break;\n              }\n\n              throw new Error('Cannot unload a Recording that has already been unloaded.');\n\n            case 5:\n              throw new Error('Cannot unload a Recording that has not been prepared.');\n\n            case 6:\n              _context10.next = 8;\n              return _regeneratorRuntime.awrap(ExponentAV.stopAudioRecording());\n\n            case 8:\n              finalStatus = _context10.sent;\n              _context10.next = 11;\n              return _regeneratorRuntime.awrap(ExponentAV.unloadAudioRecorder());\n\n            case 11:\n              return _context10.abrupt(\"return\", this._cleanupForUnloadedRecorder(finalStatus));\n\n            case 12:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI() {\n      return this._uri;\n    }\n  }, {\n    key: \"createNewLoadedSound\",\n    value: function createNewLoadedSound() {\n      var initialStatus,\n          onPlaybackStatusUpdate,\n          _args11 = arguments;\n      return _regeneratorRuntime.async(function createNewLoadedSound$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              initialStatus = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n              onPlaybackStatusUpdate = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : null;\n              console.warn(\"createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name\");\n              return _context11.abrupt(\"return\", this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate));\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"createNewLoadedSoundAsync\",\n    value: function createNewLoadedSoundAsync() {\n      var initialStatus,\n          onPlaybackStatusUpdate,\n          _args12 = arguments;\n      return _regeneratorRuntime.async(function createNewLoadedSoundAsync$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              initialStatus = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n              onPlaybackStatusUpdate = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : null;\n\n              if (!(this._uri == null || !this._isDoneRecording)) {\n                _context12.next = 4;\n                break;\n              }\n\n              throw new Error('Cannot create sound when the Recording has not finished!');\n\n            case 4:\n              return _context12.abrupt(\"return\", Sound.createAsync({\n                uri: this._uri\n              }, initialStatus, onPlaybackStatusUpdate, false));\n\n            case 5:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Recording;\n}();","map":{"version":3,"sources":["../../src/Audio/Recording.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription, Platform } from '@unimodules/core';\nimport { PermissionResponse, PermissionStatus } from 'unimodules-permissions-interface';\n\nimport {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n} from '../AV';\n\nimport ExponentAV from '../ExponentAV';\nimport { isAudioEnabled, throwIfAudioIsDisabled } from './AudioAvailability';\n\nimport { Sound } from './Sound';\n\nexport type RecordingOptions = {\n  android: {\n    extension: string;\n    outputFormat: number;\n    audioEncoder: number;\n    sampleRate?: number;\n    numberOfChannels?: number;\n    bitRate?: number;\n    maxFileSize?: number;\n  };\n  ios: {\n    extension: string;\n    outputFormat?: string | number;\n    audioQuality: number;\n    sampleRate: number;\n    numberOfChannels: number;\n    bitRate: number;\n    bitRateStrategy?: number;\n    bitDepthHint?: number;\n    linearPCMBitDepth?: number;\n    linearPCMIsBigEndian?: boolean;\n    linearPCMIsFloat?: boolean;\n  };\n};\n\n// TODO: consider changing these to enums\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;\n\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;\n\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';\n\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;\n\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;\n\n// TODO : maybe make presets for music and speech, or lossy / lossless.\n\nexport const RECORDING_OPTIONS_PRESET_HIGH_QUALITY: RecordingOptions = {\n  android: {\n    extension: '.m4a',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n};\n\nexport const RECORDING_OPTIONS_PRESET_LOW_QUALITY: RecordingOptions = {\n  android: {\n    extension: '.3gp',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n};\n\n// TODO: For consistency with PlaybackStatus, should we include progressUpdateIntervalMillis here as\n// well?\nexport type RecordingStatus = {\n  canRecord: boolean;\n  isRecording: boolean;\n  isDoneRecording: boolean;\n  durationMillis: number;\n};\n\nexport { PermissionResponse, PermissionStatus };\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.requestPermissionsAsync();\n}\n\nexport class Recording {\n  _subscription: Subscription | null = null;\n  _canRecord: boolean = false;\n  _isDoneRecording: boolean = false;\n  _finalDurationMillis: number = 0;\n  _uri: string | null = null;\n  _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n  _progressUpdateTimeoutVariable: number | null = null;\n  _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n  _options: RecordingOptions | null = null;\n\n  // Internal methods\n\n  _cleanupForUnloadedRecorder = async (finalStatus: RecordingStatus) => {\n    this._canRecord = false;\n    this._isDoneRecording = true;\n    // $FlowFixMe(greg): durationMillis is not always defined\n    this._finalDurationMillis = finalStatus.durationMillis;\n    _recorderExists = false;\n    if (this._subscription) {\n      this._subscription.remove();\n      this._subscription = null;\n    }\n    this._disablePolling();\n    return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n  };\n\n  _pollingLoop = async () => {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._progressUpdateTimeoutVariable = setTimeout(\n        this._pollingLoop,\n        this._progressUpdateIntervalMillis\n      ) as any;\n      try {\n        await this.getStatusAsync();\n      } catch (error) {\n        this._disablePolling();\n      }\n    }\n  };\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<RecordingStatus>\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n    if (this._canRecord) {\n      const status = await operation();\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because this recorder is not ready to record.');\n    }\n  }\n\n  // Note that all calls automatically call onRecordingStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<RecordingStatus> => {\n    // Automatically calls onRecordingStatusUpdate.\n    if (this._canRecord) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n    }\n    const status = {\n      canRecord: false,\n      isRecording: false,\n      isDoneRecording: this._isDoneRecording,\n      durationMillis: this._finalDurationMillis,\n    };\n    this._callOnRecordingStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n    this.getStatusAsync();\n  }\n\n  setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  // Record API\n\n  async prepareToRecordAsync(\n    options: RecordingOptions = RECORDING_OPTIONS_PRESET_LOW_QUALITY\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n\n    if (_recorderExists) {\n      throw new Error('Only one Recording object can be prepared at a given time.');\n    }\n\n    if (this._isDoneRecording) {\n      throw new Error('This Recording object is done recording; you must make a new one.');\n    }\n\n    if (!options || !options.android || !options.ios) {\n      throw new Error(\n        'You must provide recording options for android and ios in order to prepare to record.'\n      );\n    }\n\n    const extensionRegex = /^\\.\\w+$/;\n    if (\n      !options.android.extension ||\n      !options.ios.extension ||\n      !extensionRegex.test(options.android.extension) ||\n      !extensionRegex.test(options.ios.extension)\n    ) {\n      throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n    }\n\n    if (!this._canRecord) {\n      if (eventEmitter) {\n        this._subscription = eventEmitter.addListener(\n          'Expo.Recording.recorderUnloaded',\n          this._cleanupForUnloadedRecorder\n        );\n      }\n\n      const {\n        uri,\n        status,\n      }: {\n        uri: string;\n        // status is of type RecordingStatus, but without the canRecord field populated\n        status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n      } = await ExponentAV.prepareAudioRecorder(options);\n\n      _recorderExists = true;\n      this._uri = uri;\n      this._options = options;\n      this._canRecord = true;\n\n      const currentStatus = { ...status, canRecord: true };\n      this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n      this._enablePollingIfNecessaryAndPossible();\n      return currentStatus;\n    } else {\n      throw new Error('This Recording object is already prepared to record.');\n    }\n  }\n\n  async startAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n  }\n\n  async pauseAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n  }\n\n  async stopAndUnloadAsync(): Promise<RecordingStatus> {\n    if (!this._canRecord) {\n      if (this._isDoneRecording) {\n        throw new Error('Cannot unload a Recording that has already been unloaded.');\n      } else {\n        throw new Error('Cannot unload a Recording that has not been prepared.');\n      }\n    }\n    // We perform a separate native API call so that the state of the Recording can be updated with\n    // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n    const finalStatus = await ExponentAV.stopAudioRecording();\n    await ExponentAV.unloadAudioRecorder();\n    return this._cleanupForUnloadedRecorder(finalStatus);\n  }\n\n  // Read API\n\n  getURI(): string | null {\n    return this._uri;\n  }\n\n  async createNewLoadedSound(\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> {\n    console.warn(\n      `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n    );\n    return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n  }\n\n  async createNewLoadedSoundAsync(\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> {\n    if (this._uri == null || !this._isDoneRecording) {\n      throw new Error('Cannot create sound when the Recording has not finished!');\n    }\n    return Sound.createAsync(\n      // $FlowFixMe: Flow can't distinguish between this literal and Asset\n      { uri: this._uri },\n      initialStatus,\n      onPlaybackStatusUpdate,\n      false\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import URL from 'url-parse';\nexport function getFilename(url) {\n  var _URL = new URL(url, {}),\n      pathname = _URL.pathname;\n\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\nexport function getFileExtension(url) {\n  var filename = getFilename(url);\n  var dotIndex = filename.lastIndexOf('.');\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\nexport function getManifestBaseUrl(manifestUrl) {\n  var urlObject = new URL(manifestUrl, {});\n\n  if (urlObject.protocol === 'exp:') {\n    urlObject.set('protocol', 'http:');\n  } else if (urlObject.protocol === 'exps:') {\n    urlObject.set('protocol', 'https:');\n  }\n\n  var directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.set('pathname', directory);\n  urlObject.set('query', '');\n  urlObject.set('hash', '');\n  return urlObject.href;\n}","map":{"version":3,"sources":["../src/AssetUris.ts"],"names":[],"mappings":"AAAA,OAAO,GAAP,MAAgB,WAAhB;AAEA,OAAM,SAAU,WAAV,CAAsB,GAAtB,EAAiC;AAAA,aAChB,IAAI,GAAJ,CAAQ,GAAR,EAAa,EAAb,CADgB;AAAA,MAC7B,QAD6B,QAC7B,QAD6B;;AAErC,SAAO,QAAQ,CAAC,SAAT,CAAmB,QAAQ,CAAC,WAAT,CAAqB,GAArB,IAA4B,CAA/C,CAAP;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,GAA3B,EAAsC;AAC1C,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAD,CAA5B;AACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAT,CAAqB,GAArB,CAAjB;AAEA,SAAO,QAAQ,GAAG,CAAX,GAAe,QAAQ,CAAC,SAAT,CAAmB,QAAnB,CAAf,GAA8C,EAArD;AACD;AAaD,OAAM,SAAU,kBAAV,CAA6B,WAA7B,EAAgD;AACpD,MAAM,SAAS,GAAG,IAAI,GAAJ,CAAQ,WAAR,EAAqB,EAArB,CAAlB;;AAGA,MAAI,SAAS,CAAC,QAAV,KAAuB,MAA3B,EAAmC;AACjC,IAAA,SAAS,CAAC,GAAV,CAAc,UAAd,EAA0B,OAA1B;AACD,GAFD,MAEO,IAAI,SAAS,CAAC,QAAV,KAAuB,OAA3B,EAAoC;AACzC,IAAA,SAAS,CAAC,GAAV,CAAc,UAAd,EAA0B,QAA1B;AACD;;AAGD,MAAM,SAAS,GAAG,SAAS,CAAC,QAAV,CAAmB,SAAnB,CAA6B,CAA7B,EAAgC,SAAS,CAAC,QAAV,CAAmB,WAAnB,CAA+B,GAA/B,IAAsC,CAAtE,CAAlB;AACA,EAAA,SAAS,CAAC,GAAV,CAAc,UAAd,EAA0B,SAA1B;AACA,EAAA,SAAS,CAAC,GAAV,CAAc,OAAd,EAAuB,EAAvB;AACA,EAAA,SAAS,CAAC,GAAV,CAAc,MAAd,EAAsB,EAAtB;AAEA,SAAO,SAAS,CAAC,IAAjB;AACD","sourcesContent":["import URL from 'url-parse';\n\nexport function getFilename(url: string): string {\n  const { pathname } = new URL(url, {});\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\n\nexport function getFileExtension(url: string): string {\n  const filename = getFilename(url);\n  const dotIndex = filename.lastIndexOf('.');\n  // Ignore leading dots for hidden files\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\n\n/**\n * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n * parameters and fragments also are removed.\n *\n * For an Expo-hosted project with a manifest hosted at https://expo.io/@user/project/index.exp, the\n * base URL would be https://expo.io/@user/project.\n *\n * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n * to tell the OS to open the URLs in the the Expo client.\n */\nexport function getManifestBaseUrl(manifestUrl: string): string {\n  const urlObject = new URL(manifestUrl, {});\n\n  // Change the scheme to http(s) if it is exp(s)\n  if (urlObject.protocol === 'exp:') {\n    urlObject.set('protocol', 'http:');\n  } else if (urlObject.protocol === 'exps:') {\n    urlObject.set('protocol', 'https:');\n  }\n\n  // Trim filename, query parameters, and fragment, if any\n  const directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.set('pathname', directory);\n  urlObject.set('query', '');\n  urlObject.set('hash', '');\n\n  return urlObject.href;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
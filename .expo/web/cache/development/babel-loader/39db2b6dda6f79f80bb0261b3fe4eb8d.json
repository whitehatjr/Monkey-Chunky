{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\n\nfunction getStatusFromMedia(media) {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined\n    };\n  }\n\n  var isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n  var status = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100,\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    shouldPlay: media.autoplay,\n    isPlaying: isPlaying,\n    isBuffering: false,\n    rate: media.playbackRate,\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended\n  };\n  return status;\n}\n\nfunction setStatusForMedia(media, status) {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nexport default {\n  get name() {\n    return 'ExponentAV';\n  },\n\n  getStatusForVideo: function getStatusForVideo(element) {\n    return _regeneratorRuntime.async(function getStatusForVideo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  loadForVideo: function loadForVideo(element, nativeSource, fullInitialStatus) {\n    return _regeneratorRuntime.async(function loadForVideo$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  unloadForVideo: function unloadForVideo(element) {\n    return _regeneratorRuntime.async(function unloadForVideo$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setStatusForVideo: function setStatusForVideo(element, status) {\n    return _regeneratorRuntime.async(function setStatusForVideo$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", setStatusForMedia(element, status));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  replayVideo: function replayVideo(element, status) {\n    return _regeneratorRuntime.async(function replayVideo$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", setStatusForMedia(element, status));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setAudioMode: function setAudioMode() {\n    return _regeneratorRuntime.async(function setAudioMode$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setAudioIsEnabled: function setAudioIsEnabled() {\n    return _regeneratorRuntime.async(function setAudioIsEnabled$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getStatusForSound: function getStatusForSound(element) {\n    return _regeneratorRuntime.async(function getStatusForSound$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  loadForSound: function loadForSound(nativeSource, fullInitialStatus) {\n    var source, media, status;\n    return _regeneratorRuntime.async(function loadForSound$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n            media = new Audio(source);\n\n            media.ontimeupdate = function () {\n              SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n                key: media,\n                status: getStatusFromMedia(media)\n              });\n            };\n\n            media.onerror = function () {\n              SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n                key: media,\n                error: media.error.message\n              });\n            };\n\n            status = setStatusForMedia(media, fullInitialStatus);\n            return _context9.abrupt(\"return\", [media, status]);\n\n          case 6:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  unloadForSound: function unloadForSound(element) {\n    return _regeneratorRuntime.async(function unloadForSound$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            element.pause();\n            element.removeAttribute('src');\n            element.load();\n            return _context10.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 4:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setStatusForSound: function setStatusForSound(element, status) {\n    return _regeneratorRuntime.async(function setStatusForSound$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            return _context11.abrupt(\"return\", setStatusForMedia(element, status));\n\n          case 1:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  replaySound: function replaySound(element, status) {\n    return _regeneratorRuntime.async(function replaySound$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            return _context12.abrupt(\"return\", setStatusForMedia(element, status));\n\n          case 1:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getAudioRecordingStatus: function getAudioRecordingStatus() {\n    return _regeneratorRuntime.async(function getAudioRecordingStatus$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  prepareAudioRecorder: function prepareAudioRecorder() {\n    return _regeneratorRuntime.async(function prepareAudioRecorder$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  startAudioRecording: function startAudioRecording() {\n    return _regeneratorRuntime.async(function startAudioRecording$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  pauseAudioRecording: function pauseAudioRecording() {\n    return _regeneratorRuntime.async(function pauseAudioRecording$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  stopAudioRecording: function stopAudioRecording() {\n    return _regeneratorRuntime.async(function stopAudioRecording$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  unloadAudioRecorder: function unloadAudioRecorder() {\n    return _regeneratorRuntime.async(function unloadAudioRecorder$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExponentAV.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\n\nimport { PlaybackNativeSource, PlaybackStatus, PlaybackStatusToSet } from './AV';\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): PlaybackStatus {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    media.currentTime > 0 &&\n    !media.paused &&\n    !media.ended &&\n    media.readyState > 2\n  );\n\n  const status: PlaybackStatus = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false, //media.waiting,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended,\n  };\n\n  return status;\n}\n\nfunction setStatusForMedia(media: HTMLMediaElement, status: PlaybackStatusToSet): PlaybackStatus {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  // if (status.progressUpdateIntervalMillis !== undefined) {\n  //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n  // }\n  // if (status.seekMillisToleranceBefore !== undefined) {\n  //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n  // }\n  // if (status.seekMillisToleranceAfter !== undefined) {\n  //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n  // }\n  // if (status.shouldCorrectPitch !== undefined) {\n  //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n  // }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element: HTMLMediaElement): Promise<PlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async loadForVideo(\n    element: HTMLMediaElement,\n    nativeSource: PlaybackNativeSource,\n    fullInitialStatus: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async unloadForVideo(element: HTMLMediaElement): Promise<PlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async setStatusForVideo(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replayVideo(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n  async getStatusForSound(element: HTMLMediaElement) {\n    return getStatusFromMedia(element);\n  },\n  async loadForSound(\n    nativeSource: string | { uri: string; [key: string]: any },\n    fullInitialStatus: PlaybackStatusToSet\n  ): Promise<[HTMLMediaElement, PlaybackStatus]> {\n    const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n    const media = new Audio(source);\n\n    media.ontimeupdate = () => {\n      SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n        key: media,\n        status: getStatusFromMedia(media),\n      });\n    };\n\n    media.onerror = () => {\n      SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n        key: media,\n        error: media.error!.message,\n      });\n    };\n\n    const status = setStatusForMedia(media, fullInitialStatus);\n\n    return [media, status];\n  },\n  async unloadForSound(element: HTMLMediaElement) {\n    element.pause();\n    element.removeAttribute('src');\n    element.load();\n    return getStatusFromMedia(element);\n  },\n  async setStatusForSound(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replaySound(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus() {},\n  async prepareAudioRecorder() {},\n  async startAudioRecording() {},\n  async pauseAudioRecording() {},\n  async stopAudioRecording() {},\n  async unloadAudioRecorder() {},\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/drpoojayadav/Downloads/C67Forking/Monkey-Chunky/components/PhonicSoundButton.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Audio } from 'expo-av';\n\nvar PhonicSoundButton = function (_React$Component) {\n  _inherits(PhonicSoundButton, _React$Component);\n\n  var _super = _createSuper(PhonicSoundButton);\n\n  function PhonicSoundButton(props) {\n    var _this;\n\n    _classCallCheck(this, PhonicSoundButton);\n\n    _this = _super.call(this, props);\n\n    _this.playSound = function _callee(soundChunk) {\n      var soundLink;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(soundChunk);\n              soundLink = 'https://whitehatjrcontent.s3.ap-south-1.amazonaws.com/phones/' + soundChunk + '.mp3';\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Audio.Sound.createAsync({\n                uri: soundLink\n              }, {\n                shouldPlay: true\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      pressedButtonIndex: ''\n    };\n    return _this;\n  }\n\n  _createClass(PhonicSoundButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(TouchableOpacity, {\n        style: this.props.buttonIndex === this.state.pressButtonIndex ? [styles.chunkButton, {\n          backgroundColor: 'white'\n        }] : [styles.chunkButton, {\n          backgroundColor: 'red'\n        }],\n        onPress: function onPress() {\n          _this2.setState({\n            pressButtonIndex: _this2.props.buttonIndex\n          });\n\n          _this2.playSound(_this2.props.soundChunk);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: this.props.buttonIndex === this.state.pressButtonIndex ? [styles.displayText, {\n          color: 'red'\n        }] : [styles.displayText, {\n          color: 'white'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, this.props.wordChunk));\n    }\n  }]);\n\n  return PhonicSoundButton;\n}(React.Component);\n\nexport { PhonicSoundButton as default };\nvar styles = StyleSheet.create({\n  displayText: {\n    textAlign: 'center',\n    fontSize: 30,\n    color: 'white'\n  },\n  chunkButton: {\n    width: '60%',\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignSelf: 'center',\n    borderRadius: 10,\n    margin: 5,\n    backgroundColor: 'red'\n  }\n});","map":{"version":3,"sources":["/Users/drpoojayadav/Downloads/C67Forking/Monkey-Chunky/components/PhonicSoundButton.js"],"names":["React","Audio","PhonicSoundButton","props","playSound","soundChunk","console","log","soundLink","Sound","createAsync","uri","shouldPlay","state","pressedButtonIndex","buttonIndex","pressButtonIndex","styles","chunkButton","backgroundColor","setState","displayText","color","wordChunk","Component","StyleSheet","create","textAlign","fontSize","width","height","justifyContent","alignItems","alignSelf","borderRadius","margin"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAEA,SAASC,KAAT,QAAsB,SAAtB;;IAEqBC,iB;;;;;AAClB,6BAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAOnBC,SAPmB,GAOP,iBAAMC,UAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACIG,cAAAA,SAFM,GAGR,kEACAH,UADA,GAEA,MALQ;AAAA;AAAA,+CAMJJ,KAAK,CAACQ,KAAN,CAAYC,WAAZ,CACJ;AACEC,gBAAAA,GAAG,EAAEH;AADP,eADI,EAIJ;AAAEI,gBAAAA,UAAU,EAAE;AAAd,eAJI,CANI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAPO;;AAEf,UAAKC,KAAL,GAAa;AACXC,MAAAA,kBAAkB,EAAE;AADT,KAAb;AAFe;AAMhB;;;;WAcH,kBAAS;AAAA;;AACP,aACE,oBAAC,gBAAD;AACE,QAAA,KAAK,EACH,KAAKX,KAAL,CAAWY,WAAX,KAA2B,KAAKF,KAAL,CAAWG,gBAAtC,GACc,CAACC,MAAM,CAACC,WAAR,EAAqB;AAAEC,UAAAA,eAAe,EAAE;AAAnB,SAArB,CADd,GAEc,CAACF,MAAM,CAACC,WAAR,EAAqB;AAAEC,UAAAA,eAAe,EAAE;AAAnB,SAArB,CAJlB;AAME,QAAA,OAAO,EAAE,mBAAM;AACb,UAAA,MAAI,CAACC,QAAL,CAAc;AAAEJ,YAAAA,gBAAgB,EAAE,MAAI,CAACb,KAAL,CAAWY;AAA/B,WAAd;;AACA,UAAA,MAAI,CAACX,SAAL,CAAe,MAAI,CAACD,KAAL,CAAWE,UAA1B;AACD,SATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUE,oBAAC,IAAD;AAAM,QAAA,KAAK,EACT,KAAKF,KAAL,CAAWY,WAAX,KAA2B,KAAKF,KAAL,CAAWG,gBAAtC,GACgB,CAACC,MAAM,CAACI,WAAR,EAAqB;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAArB,CADhB,GAEgB,CAACL,MAAM,CAACI,WAAR,EAAqB;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAArB,CAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKnB,KAAL,CAAWoB,SAJd,CAVF,CADF;AAkBD;;;;EAxC4CvB,KAAK,CAACwB,S;;SAAhCtB,iB;AA2CrB,IAAMe,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,WAAW,EAAE;AACXM,IAAAA,SAAS,EAAE,QADA;AAEXC,IAAAA,QAAQ,EAAE,EAFC;AAGXN,IAAAA,KAAK,EAAE;AAHI,GADkB;AAM/BJ,EAAAA,WAAW,EAAC;AACVW,IAAAA,KAAK,EAAE,KADG;AAEVC,IAAAA,MAAM,EAAE,EAFE;AAGVC,IAAAA,cAAc,EAAE,QAHN;AAIVC,IAAAA,UAAU,EAAE,QAJF;AAKVC,IAAAA,SAAS,EAAE,QALD;AAMVC,IAAAA,YAAY,EAAE,EANJ;AAOVC,IAAAA,MAAM,EAAE,CAPE;AAQVhB,IAAAA,eAAe,EAAE;AARP;AANmB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default class PhonicSoundButton extends React.Component {\n   constructor(props){\n      super(props);\n      this.state = {\n        pressedButtonIndex: '',\n      }\n      \n    }\n  playSound = async soundChunk => {\n    console.log(soundChunk);\n    var soundLink =\n      'https://whitehatjrcontent.s3.ap-south-1.amazonaws.com/phones/' +\n      soundChunk +\n      '.mp3';\n    await Audio.Sound.createAsync(\n      {\n        uri: soundLink,\n      },\n      { shouldPlay: true }\n    );\n  };\n  render() {\n    return (\n      <TouchableOpacity\n        style={\n          this.props.buttonIndex === this.state.pressButtonIndex\n                      ? [styles.chunkButton, { backgroundColor: 'white' }]\n                      : [styles.chunkButton, { backgroundColor: 'red' }]\n          }\n        onPress={() => {\n          this.setState({ pressButtonIndex: this.props.buttonIndex });\n          this.playSound(this.props.soundChunk);\n        }}>\n        <Text style={\n          this.props.buttonIndex === this.state.pressButtonIndex\n                        ? [styles.displayText, { color: 'red' }]\n                        : [styles.displayText, { color: 'white' }]\n        }>{this.props.wordChunk}</Text>\n      </TouchableOpacity>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  displayText: {\n    textAlign: 'center',\n    fontSize: 30,\n    color: 'white'\n  },\n  chunkButton:{\n    width: '60%',\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignSelf: 'center',\n    borderRadius: 10,\n    margin: 5,\n    backgroundColor: 'red'\n  }\n});"]},"metadata":{},"sourceType":"module"}
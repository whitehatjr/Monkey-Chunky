{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { getAssetByID } from \"./AssetRegistry\";\nimport AssetSourceResolver from \"./AssetSourceResolver\";\n\nvar _customSourceTransformer;\n\nvar _serverURL;\n\nvar _scriptURL;\n\nvar _sourceCodeScriptURL;\n\nfunction getSourceCodeScriptURL() {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  var sourceCode = nativeExtensions && nativeExtensions.SourceCode;\n\n  if (!sourceCode) {\n    sourceCode = NativeModules && NativeModules.SourceCode;\n  }\n\n  _sourceCodeScriptURL = sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL() {\n  if (_serverURL === undefined) {\n    var sourceCodeScriptURL = getSourceCodeScriptURL();\n    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n\n    if (match) {\n      _serverURL = match[0];\n    } else {\n      _serverURL = null;\n    }\n  }\n\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL) {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      return null;\n    }\n\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n\n    if (!scriptURL.includes('://')) {\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n\n  return null;\n}\n\nfunction getScriptURL() {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n\n  return _scriptURL;\n}\n\nexport function setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\nexport default function resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  var asset = getAssetByID(source);\n\n  if (!asset) {\n    return undefined;\n  }\n\n  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n\n  return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get: function get() {\n    return setCustomSourceTransformer;\n  }\n});\nvar pickScale = AssetSourceResolver.pickScale;\nexport { pickScale };","map":{"version":3,"sources":["../src/resolveAssetSource.web.ts"],"names":[],"mappings":";AACA,SAAS,YAAT;AAEA,OAAO,mBAAP;;AAIA,IAAI,wBAAJ;;AACA,IAAI,UAAJ;;AACA,IAAI,UAAJ;;AACA,IAAI,oBAAJ;;AAEA,SAAS,sBAAT,GAA+B;AAC7B,MAAI,oBAAJ,EAA0B;AACxB,WAAO,oBAAP;AACD;;AAED,MAAI,UAAU,GAAG,gBAAgB,IAAI,gBAAgB,CAAC,UAAtD;;AACA,MAAI,CAAC,UAAL,EAAiB;AACf,IAAA,UAAU,GAAG,aAAa,IAAI,aAAa,CAAC,UAA5C;AACD;;AACD,EAAA,oBAAoB,GAAG,UAAU,CAAC,SAAlC;AACA,SAAO,oBAAP;AACD;;AAED,SAAS,eAAT,GAAwB;AACtB,MAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5B,QAAM,mBAAmB,GAAG,sBAAsB,EAAlD;AACA,QAAM,KAAK,GAAG,mBAAmB,IAAI,mBAAmB,CAAC,KAApB,CAA0B,mBAA1B,CAArC;;AACA,QAAI,KAAJ,EAAW;AAET,MAAA,UAAU,GAAG,KAAK,CAAC,CAAD,CAAlB;AACD,KAHD,MAGO;AAEL,MAAA,UAAU,GAAG,IAAb;AACD;AACF;;AACD,SAAO,UAAP;AACD;;AAED,SAAS,qBAAT,CAA+B,SAA/B,EAAmE;AACjE,MAAI,SAAJ,EAAe;AACb,QAAI,SAAS,CAAC,UAAV,CAAqB,WAArB,CAAJ,EAAuC;AAErC,aAAO,IAAP;AACD;;AACD,IAAA,SAAS,GAAG,SAAS,CAAC,SAAV,CAAoB,CAApB,EAAuB,SAAS,CAAC,WAAV,CAAsB,GAAtB,IAA6B,CAApD,CAAZ;;AACA,QAAI,CAAC,SAAS,CAAC,QAAV,CAAmB,KAAnB,CAAL,EAAgC;AAG9B,MAAA,SAAS,GAAG,YAAY,SAAxB;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAAS,YAAT,GAAqB;AACnB,MAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5B,IAAA,UAAU,GAAG,qBAAqB,CAAC,sBAAsB,EAAvB,CAAlC;AACD;;AACD,SAAO,UAAP;AACD;;AAED,OAAM,SAAU,0BAAV,CACJ,WADI,EAC+D;AAEnE,EAAA,wBAAwB,GAAG,WAA3B;AACD;AAMD,eAAc,SAAU,kBAAV,CAA6B,MAA7B,EAAwC;AACpD,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAO,MAAP;AACD;;AAED,MAAM,KAAK,GAAG,YAAY,CAAC,MAAD,CAA1B;;AACA,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,SAAP;AACD;;AAED,MAAM,QAAQ,GAAG,IAAI,mBAAJ,CAAwB,eAAe,EAAvC,EAA2C,YAAY,EAAvD,EAA2D,KAA3D,CAAjB;;AACA,MAAI,wBAAJ,EAA8B;AAC5B,WAAO,wBAAwB,CAAC,QAAD,CAA/B;AACD;;AACD,SAAO,QAAQ,CAAC,YAAT,EAAP;AACD;AAED,MAAM,CAAC,cAAP,CAAsB,kBAAtB,EAA0C,4BAA1C,EAAwE;AACtE,EAAA,GADsE,iBACnE;AACD,WAAO,0BAAP;AACD;AAHqE,CAAxE;IAMe,S,GAAc,mB,CAAd,S","sourcesContent":["import { NativeModules } from 'react-native';\nimport { getAssetByID } from './AssetRegistry';\n\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare var nativeExtensions: any;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _scriptURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = nativeExtensions && nativeExtensions.SourceCode;\n  if (!sourceCode) {\n    sourceCode = NativeModules && NativeModules.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: string | undefined | null): string | null {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return null;\n}\n\nfunction getScriptURL(): string | null {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
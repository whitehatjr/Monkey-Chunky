/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * @flow
 */

'use strict';

const React = require('react');

const {Picker, Text, View} = require('react-native');

class TextLegend extends React.Component<*, *> {
  state: $TEMPORARY$object<{|
    alignment: $TEMPORARY$string<'left'>,
    fontSize: number,
    language: $TEMPORARY$string<'english'>,
    textMetrics: Array<any>,
  |}> = {
    textMetrics: [],
    language: 'english',
    alignment: 'left',
    fontSize: 50,
  };

  render(): React.Node {
    const PANGRAMS = {
      arabic:
        '╪╡┘Р┘Б ╪о┘О┘Д┘В┘О ╪о┘О┘И╪п┘Р ┘Г┘О┘Е┘Р╪л┘Д┘Р ╪з┘Д╪┤┘О┘Е╪│┘Р ╪е┘Р╪░ ╪и┘О╪▓┘О╪║┘О╪к тАФ ┘К┘О╪н╪╕┘Й ╪з┘Д╪╢┘О╪м┘К╪╣┘П ╪и┘Р┘З╪з ┘Ж┘О╪м┘Д╪з╪б┘О ┘Е┘Р╪╣╪╖╪з╪▒┘Р',
      chinese: 'Innovation in China ф╕нхЫ╜цЩ║щАая╝МцЕзхПКхЕичРГ 0123456789',
      english: 'The quick brown fox jumps over the lazy dog.',
      emoji: 'ЁЯЩПЁЯП╛ЁЯЪЧЁЯТйЁЯШНЁЯдпЁЯСйЁЯП╜тАНЁЯФзЁЯЗиЁЯЗжЁЯТп',
      german: 'Falsches ├Ьben von Xylophonmusik qu├дlt jeden gr├╢├Яeren Zwerg',
      greek: '╬д╬▒╧З╬п╧Г╧Д╬╖ ╬▒╬╗╧О╧А╬╖╬╛ ╬▓╬▒╧Ж╬о╧В ╧И╬╖╬╝╬н╬╜╬╖ ╬│╬╖, ╬┤╧Б╬▒╧Г╬║╬╡╬╗╬п╬╢╬╡╬╣ ╧Е╧А╬н╧Б ╬╜╧Й╬╕╧Б╬┐╧Н ╬║╧Е╬╜╧М╧В',
      hebrew: '╫У╫Т ╫б╫з╫и╫Я ╫й╫Ш ╫С╫Щ╫Э ╫Ю╫Р╫Х╫Ы╫Ц╫С ╫Х╫Ь╫д╫к╫в ╫Ю╫ж╫Р ╫Ч╫С╫и╫Ф',
      hindi:
        'рдЛрд╖рд┐рдпреЛрдВ рдХреЛ рд╕рддрд╛рдиреЗ рд╡рд╛рд▓реЗ рджреБрд╖реНрдЯ рд░рд╛рдХреНрд╖рд╕реЛрдВ рдХреЗ рд░рд╛рдЬрд╛ рд░рд╛рд╡рдг рдХрд╛ рд╕рд░реНрд╡рдирд╛рд╢ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рд╡рд┐рд╖реНрдгреБрд╡рддрд╛рд░ рднрдЧрд╡рд╛рди рд╢реНрд░реАрд░рд╛рдо, рдЕрдпреЛрдзреНрдпрд╛ рдХреЗ рдорд╣рд╛рд░рд╛рдЬ рджрд╢рд░рде рдХреЗ рдмрдбрд╝реЗ рд╕рдкреБрддреНрд░ рдереЗред',
      igbo:
        'Nne, nna, wepс╗е heтАЩlтАЩс╗еjс╗Н dum nтАЩime с╗Нzс╗еzс╗е с╗еmс╗е, vufesi obi nye Chukwu, с╣Ес╗еrс╗Лanс╗е, gbakс╗Нс╗Нnс╗е kpaa, kwee ya ka o guzoshie ike; с╗Н ghaghс╗Л ito, nwapс╗еta ezi agwa',
      irish:
        'DтАЩfhuascail ├Нosa ├Ъrmhac na h├Уighe Beannaithe p├│r ├Йava agus ├Бdhaimh',
      japanese:
        'шЙ▓уБпхМВуБ╕уБй цХгуВКуБмуВЛуВТ цИСуБМф╕Цшк░уБЮ х╕╕уБкуВЙуВА цЬЙчВ║уБохеех▒▒ ф╗КцЧеш╢КуБИуБж ц╡ЕуБНхдвшжЛуБШ щЕФуБ▓уВВуБЫуБЪ',
      korean:
        'эВдьКдьЭШ ъ│аьЬаьб░ъ▒┤ьЭА ьЮЕьИаыБ╝ыжм ызМыВШьХ╝ эХШъ│а эК╣ы│ДэХЬ ъ╕░ьИаьЭА эХДьЪФь╣Ш ьХКыЛд',
      norwegian:
        'V├еr s├жre Zulu fra bade├╕ya spilte jo whist og quickstep i min taxi.',
      polish: 'Je┼╝u kl─Еtw, sp┼В├│d┼║ Finom cz─Щ┼Ы─З gry ha┼Дb!',
      romanian: 'Muzicolog─Г ├оn bej v├вnd whisky ╚Щi tequila, pre╚Ы fix.',
      russian: '╨н╤Е, ╤З╤Г╨╢╨░╨║, ╨╛╨▒╤Й╨╕╨╣ ╤Б╤К╤С╨╝ ╤Ж╨╡╨╜ ╤И╨╗╤П╨┐ (╤О╤Д╤В╤М) тАУ ╨▓╨┤╤А╤Л╨╖╨│!',
      swedish: 'Yxskaftbud, ge v├еr WC-zonm├╢ IQ-hj├дlp.',
      thai:
        'р╣Ар╕Ыр╣Зр╕Щр╕бр╕Щр╕╕р╕йр╕вр╣Мр╕кр╕╕р╕Фр╕Ыр╕гр╕░р╣Ар╕кр╕гр╕┤р╕Рр╣Ар╕ер╕┤р╕ир╕Др╕╕р╕Ур╕Др╣Ир╕▓ р╕Бр╕зр╣Ир╕▓р╕Ър╕гр╕гр╕Фр╕▓р╕Эр╕╣р╕Зр╕кр╕▒р╕Хр╕зр╣Мр╣Ар╕Фр╕гр╕▒р╕Ир╕Йр╕▓р╕Щ р╕Ир╕Зр╕Эр╣Ир╕▓р╕Яр╕▒р╕Щр╕Юр╕▒р╕Тр╕Щр╕▓р╕зр╕┤р╕Кр╕▓р╕Бр╕▓р╕г р╕нр╕вр╣Ир╕▓р╕ер╣Йр╕▓р╕Зр╕Ьр╕ер╕▓р╕Нр╕др╣Ер╣Ар╕Вр╣Ир╕Щр╕Жр╣Ир╕▓р╕Ър╕╡р╕Ср╕▓р╣Гр╕Др╕г р╣Др╕бр╣Ир╕Цр╕╖р╕нр╣Вр╕Чр╕йр╣Вр╕Бр╕гр╕Шр╣Бр╕Кр╣Ир╕Зр╕Лр╕▒р╕Фр╕ор╕╢р╕Фр╕ор╕▒р╕Фр╕Фр╣Ир╕▓ р╕лр╕▒р╕Фр╕нр╕ар╕▒р╕вр╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕╡р╕мр╕▓р╕нр╕▒р╕Кр╕Мр╕▓р╕кр╕▒р╕в р╕Ыр╕Пр╕┤р╕Ър╕▒р╕Хр╕┤р╕Ыр╕гр╕░р╕Юр╕др╕Хр╕┤р╕Бр╕Ор╕Бр╕│р╕лр╕Щр╕Фр╣Гр╕И р╕Юр╕╣р╕Фр╕Ир╕▓р╣Гр╕лр╣Йр╕Ир╣Кр╕░р╣Ж р╕Ир╣Лр╕▓р╣Ж р╕Щр╣Ир╕▓р╕Яр╕▒р╕Зр╣Ар╕нр╕вр╕п',
    };
    return (
      <View>
        <Text
          onPress={() =>
            this.setState(prevState => ({fontSize: prevState.fontSize + 3}))
          }>
          Increase size
        </Text>
        <Text
          onPress={() =>
            this.setState(prevState => ({fontSize: prevState.fontSize - 3}))
          }>
          Decrease size
        </Text>
        <Picker
          selectedValue={this.state.language}
          onValueChange={itemValue => this.setState({language: itemValue})}>
          {Object.keys(PANGRAMS).map(x => (
            <Picker.Item
              label={x[0].toUpperCase() + x.substring(1)}
              key={x}
              value={x}
            />
          ))}
        </Picker>
        <View>
          {this.state.textMetrics.map(
            ({
              x,
              y,
              width,
              height,
              capHeight,
              ascender,
              descender,
              xHeight,
            }) => {
              return [
                <View
                  key="baseline view"
                  style={{
                    top: y + ascender,
                    height: 1,
                    left: 0,
                    right: 0,
                    position: 'absolute',
                    backgroundColor: 'red',
                  }}
                />,
                <Text
                  key="baseline text"
                  style={{
                    top: y + ascender,
                    right: 0,
                    position: 'absolute',
                    color: 'red',
                  }}>
                  Baseline
                </Text>,
                <View
                  key="capheight view"
                  style={{
                    top: y + ascender - capHeight,
                    height: 1,
                    left: 0,
                    right: 0,
                    position: 'absolute',
                    backgroundColor: 'green',
                  }}
                />,
                <Text
                  key="capheight text"
                  style={{
                    top: y + ascender - capHeight,
                    right: 0,
                    position: 'absolute',
                    color: 'green',
                  }}>
                  Capheight
                </Text>,
                <View
                  key="xheight view"
                  style={{
                    top: y + ascender - xHeight,
                    height: 1,
                    left: 0,
                    right: 0,
                    position: 'absolute',
                    backgroundColor: 'blue',
                  }}
                />,
                <Text
                  key="xheight text"
                  style={{
                    top: y + ascender - xHeight,
                    right: 0,
                    position: 'absolute',
                    color: 'blue',
                  }}>
                  X-height
                </Text>,
                <View
                  key="descender view"
                  style={{
                    top: y + ascender + descender,
                    height: 1,
                    left: 0,
                    right: 0,
                    position: 'absolute',
                    backgroundColor: 'orange',
                  }}
                />,
                <Text
                  key="descender text"
                  style={{
                    top: y + ascender + descender,
                    right: 0,
                    position: 'absolute',
                    color: 'orange',
                  }}>
                  Descender
                </Text>,
                <View
                  key="end of text view"
                  style={{
                    top: y,
                    height: height,
                    width: 1,
                    left: x + width,
                    position: 'absolute',
                    backgroundColor: 'brown',
                  }}
                />,
                <Text
                  key="end of text text"
                  style={{
                    top: y,
                    left: x + width + 5,
                    position: 'absolute',
                    color: 'brown',
                  }}>
                  End of text
                </Text>,
                <View
                  key="start of text view"
                  style={{
                    top: y,
                    height: height,
                    width: 1,
                    left: x,
                    position: 'absolute',
                    backgroundColor: 'brown',
                  }}
                />,
                <Text
                  key="start of text text"
                  style={{
                    top: y,
                    left: x + 5,
                    position: 'absolute',
                    color: 'brown',
                  }}>
                  Start of text
                </Text>,
              ];
            },
          )}
          <Text
            onTextLayout={event => {
              this.setState({textMetrics: event.nativeEvent.lines});
            }}
            style={{
              fontSize: this.state.fontSize,
              textAlign: this.state.alignment,
            }}>
            {PANGRAMS[this.state.language]}
          </Text>
        </View>
        <Picker
          selectedValue={this.state.alignment}
          onValueChange={itemValue => this.setState({alignment: itemValue})}>
          <Picker.Item label="Left align" value="left" />
          <Picker.Item label="Center align" value="center" />
          <Picker.Item label="Right align" value="right" />
        </Picker>
      </View>
    );
  }
}
module.exports = TextLegend;

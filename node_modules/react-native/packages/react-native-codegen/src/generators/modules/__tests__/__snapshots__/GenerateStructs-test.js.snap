// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenerateStructs can generate fixture SIMPLE_CONSTANTS 1`] = `
"

namespace JS {
  namespace NativeSampleTurboModule {
    struct ConstantsDG {

      struct Builder {
        struct Input {
          RCTRequired<bool> h;
          RCTRequired<double> i;
          RCTRequired<NSString *> j;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsDG */
        Builder(ConstantsDG i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsDG fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsDG(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

inline JS::NativeSampleTurboModule::ConstantsDG::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto h = i.h.get();
  d[@\\"h\\"] = @(h);
auto i = i.i.get();
  d[@\\"i\\"] = @(i);
auto j = i.j.get();
  d[@\\"j\\"] = j;
  return d;
}) {}
inline JS::NativeSampleTurboModule::ConstantsDG::Builder::Builder(ConstantsDG i) : _factory(^{
  return i.unsafeRawValue();
}) {}

namespace JS {
  namespace NativeSampleTurboModule {
    struct ConstantsD {

      struct Builder {
        struct Input {
          RCTRequired<bool> e;
          RCTRequired<double> f;
          RCTRequired<JS::NativeSampleTurboModule::ConstantsDG::Builder> g;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsD */
        Builder(ConstantsD i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsD fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsD(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

inline JS::NativeSampleTurboModule::ConstantsD::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto e = i.e.get();
  d[@\\"e\\"] = @(e);
auto f = i.f.get();
  d[@\\"f\\"] = @(f);
auto g = i.g.get();
  d[@\\"g\\"] = g.buildUnsafeRawValue();
  return d;
}) {}
inline JS::NativeSampleTurboModule::ConstantsD::Builder::Builder(ConstantsD i) : _factory(^{
  return i.unsafeRawValue();
}) {}

namespace JS {
  namespace NativeSampleTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> a;
          RCTRequired<double> b;
          RCTRequired<NSString *> c;
          RCTRequired<JS::NativeSampleTurboModule::ConstantsD::Builder> d;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto a = i.a.get();
  d[@\\"a\\"] = @(a);
auto b = i.b.get();
  d[@\\"b\\"] = @(b);
auto c = i.c.get();
  d[@\\"c\\"] = c;
auto d = i.d.get();
  d[@\\"d\\"] = d.buildUnsafeRawValue();
  return d;
}) {}
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
"
`;

exports[`GenerateStructs can generate fixture SIMPLE_STRUCT 1`] = `
"

namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecSampleFuncReturnTypeDG {
      bool h() const;
      double i() const;
      NSString *j() const;

      SpecSampleFuncReturnTypeDG(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecSampleFuncReturnTypeDG)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecSampleFuncReturnTypeDG:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecSampleFuncReturnTypeD {
      bool e() const;
      double f() const;
      JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeDG g() const;

      SpecSampleFuncReturnTypeD(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecSampleFuncReturnTypeD)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecSampleFuncReturnTypeD:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecSampleFuncReturnType {
      bool a() const;
      double b() const;
      NSString *c() const;
      JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeD d() const;

      SpecSampleFuncReturnType(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecSampleFuncReturnType)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecSampleFuncReturnType:(id)json;
@end

inline bool JS::NativeSampleTurboModule::SpecSampleFuncReturnType::a() const
{
  id const p = _v[@\\"a\\"];
  return RCTBridgingToBool(p);
}


inline double JS::NativeSampleTurboModule::SpecSampleFuncReturnType::b() const
{
  id const p = _v[@\\"b\\"];
  return RCTBridgingToDouble(p);
}


inline NSString *JS::NativeSampleTurboModule::SpecSampleFuncReturnType::c() const
{
  id const p = _v[@\\"c\\"];
  return RCTBridgingToString(p);
}


inline JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeD JS::NativeSampleTurboModule::SpecSampleFuncReturnType::d() const
{
  id const p = _v[@\\"d\\"];
  return JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeD(p);
}


inline bool JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeD::e() const
{
  id const p = _v[@\\"e\\"];
  return RCTBridgingToBool(p);
}


inline double JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeD::f() const
{
  id const p = _v[@\\"f\\"];
  return RCTBridgingToDouble(p);
}


inline JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeDG JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeD::g() const
{
  id const p = _v[@\\"g\\"];
  return JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeDG(p);
}


inline bool JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeDG::h() const
{
  id const p = _v[@\\"h\\"];
  return RCTBridgingToBool(p);
}


inline double JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeDG::i() const
{
  id const p = _v[@\\"i\\"];
  return RCTBridgingToDouble(p);
}


inline NSString *JS::NativeSampleTurboModule::SpecSampleFuncReturnTypeDG::j() const
{
  id const p = _v[@\\"j\\"];
  return RCTBridgingToString(p);
}

"
`;

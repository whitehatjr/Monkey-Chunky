{"version":3,"sources":["MenuItem.tsx"],"names":["color","React","View","StyleSheet","Icon","TouchableRipple","Text","withTheme","black","white","MenuItem","props","icon","title","disabled","onPress","theme","style","disabledColor","dark","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","row","item","content","widthWithIcon","Component","displayName","minWidth","maxWidth","iconWidth","create","padding","flexDirection","width","fontSize","margin","justifyContent"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, ViewStyle, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const { icon, title, disabled, onPress, theme, style } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    minWidth,\n    maxWidth,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    margin: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]}
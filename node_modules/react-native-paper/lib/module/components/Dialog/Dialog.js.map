{"version":3,"sources":["Dialog.tsx"],"names":["React","StyleSheet","Platform","Modal","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","Dialog","props","children","dismissable","onDismiss","visible","style","theme","borderRadius","roundness","backgroundColor","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","Component","Content","Actions","Title","ScrollArea","defaultProps","create","marginVertical","OS","marginHorizontal","elevation","justifyContent"],"mappings":"2bAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,UAAT,CAAqBC,QAArB,KAA2D,cAA3D,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAEA,MAAOC,CAAAA,WAAP,KAAyD,eAAzD,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CACA,OAASC,SAAT,KAA0B,oBAA1B,C,GA0EMC,CAAAA,M,+PAeK,iBAQH,KAAKC,KARF,CAELC,QAFK,aAELA,QAFK,CAGLC,WAHK,aAGLA,WAHK,CAILC,SAJK,aAILA,SAJK,CAKLC,OALK,aAKLA,OALK,CAMLC,KANK,aAMLA,KANK,CAOLC,KAPK,aAOLA,KAPK,CAUP,MACE,qBAAC,KAAD,EACE,WAAW,CAAEJ,WADf,CAEE,SAAS,CAAEC,SAFb,CAGE,OAAO,CAAEC,OAHX,CAIE,qBAAqB,CAAE,CACrB,CACEG,YAAY,CAAED,KAAK,CAACE,SADtB,CAEEC,eAAe,CAAEH,KAAK,CAACI,MAAN,CAAaC,OAFhC,CADqB,CAKrBC,MAAM,CAACC,SALc,CAMrBR,KANqB,CAJzB,kDAaGf,KAAK,CAACwB,QAAN,CAAeC,OAAf,CAAuBd,QAAvB,EACEe,MADF,CACS,SAAAC,KAAK,QAAIA,CAAAA,KAAK,EAAI,IAAT,EAAiB,MAAOA,CAAAA,KAAP,GAAiB,SAAtC,EADd,EAEEC,GAFF,CAEM,SAACD,KAAD,CAAQE,CAAR,CAAc,CACjB,GACEA,CAAC,GAAK,CAAN,EACA7B,KAAK,CAAC8B,cAAN,CAAqBH,KAArB,CADA,EAEAA,KAAK,CAACI,IAAN,GAAe3B,aAHjB,CAIE,CAEA,MAAOJ,CAAAA,KAAK,CAACgC,YAAN,CAAmBL,KAAnB,CAA0B,CAC/BZ,KAAK,CAAE,CAAC,CAAEkB,UAAU,CAAE,EAAd,CAAD,CAAqBN,KAAK,CAACjB,KAAN,CAAYK,KAAjC,CADwB,CAA1B,CAAP,CAGD,CAED,MAAOY,CAAAA,KAAP,CACD,CAfF,CAbH,CADF,CAgCD,C,oBAzDkB3B,KAAK,CAACkC,S,EAArBzB,M,CAEG0B,O,CAAU/B,a,CAFbK,M,CAIG2B,O,CAAU/B,a,CAJbI,M,CAMG4B,K,CAAQ/B,W,CANXG,M,CAQG6B,U,CAAa/B,gB,CARhBE,M,CAUG8B,Y,CAAe,CACpB3B,WAAW,CAAE,IADO,CAEpBE,OAAO,CAAE,KAFW,C,CAkDxB,GAAMQ,CAAAA,MAAM,CAAGrB,UAAU,CAACuC,MAAX,CAAkB,CAC/BjB,SAAS,CAAE,CAQTkB,cAAc,CAAEvC,QAAQ,CAACwC,EAAT,GAAgB,SAAhB,CAA4B,EAA5B,CAAiC,CARxC,CASTC,gBAAgB,CAAE,EATT,CAUTC,SAAS,CAAE,EAVF,CAWTC,cAAc,CAAE,YAXP,CADoB,CAAlB,CAAf,CAgBA,cAAerC,CAAAA,SAAS,CAACC,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _showDialog = () => this.setState({ visible: true });\n *\n *   _hideDialog = () => this.setState({ visible: false });\n *\n *   render() {\n *     return (\n *       <View>\n *         <Button onPress={this._showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog\n *              visible={this.state.visible}\n *              onDismiss={this._hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={this._hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass Dialog extends React.Component<Props> {\n  // @component ./DialogContent.tsx\n  static Content = DialogContent;\n  // @component ./DialogActions.tsx\n  static Actions = DialogActions;\n  // @component ./DialogTitle.tsx\n  static Title = DialogTitle;\n  // @component ./DialogScrollArea.tsx\n  static ScrollArea = DialogScrollArea;\n\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  render() {\n    const {\n      children,\n      dismissable,\n      onDismiss,\n      visible,\n      style,\n      theme,\n    } = this.props;\n\n    return (\n      <Modal\n        dismissable={dismissable}\n        onDismiss={onDismiss}\n        visible={visible}\n        contentContainerStyle={[\n          {\n            borderRadius: theme.roundness,\n            backgroundColor: theme.colors.surface,\n          },\n          styles.container,\n          style,\n        ]}\n      >\n        {React.Children.toArray(children)\n          .filter(child => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              i === 0 &&\n              React.isValidElement(child) &&\n              child.type === DialogContent\n            ) {\n              // Dialog content is the first item, so we add a top padding\n              return React.cloneElement(child, {\n                style: [{ paddingTop: 24 }, child.props.style],\n              });\n            }\n\n            return child;\n          })}\n      </Modal>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]}
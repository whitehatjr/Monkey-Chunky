{"version":3,"sources":["Appbar.tsx"],"names":["React","View","Platform","StyleSheet","color","AppbarContent","AppbarAction","AppbarBackAction","AppbarHeader","Surface","withTheme","black","white","overlay","DEFAULT_APPBAR_HEIGHT","Appbar","props","children","dark","style","theme","rest","colors","isDarkTheme","mode","flatten","customBackground","backgroundColor","elevation","restStyle","isDark","surface","primary","isLight","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","OS","hasAppbarContent","leftItemsCount","rightItemsCount","Children","forEach","child","isValidElement","type","styles","appbar","spacing","toArray","filter","map","i","includes","marginLeft","alignItems","cloneElement","Component","Content","Action","BackAction","Header","create","height","flexDirection","paddingHorizontal","width"],"mappings":"qkBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,IAAT,CAA0BC,QAA1B,CAAoCC,UAApC,KAAiE,cAAjE,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,aAAP,KAGO,iBAHP,CAIA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CAEA,MAAOC,CAAAA,YAAP,KAA4D,gBAA5D,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,OAASC,SAAT,KAA0B,oBAA1B,CACA,OAASC,KAAT,CAAgBC,KAAhB,KAA6B,qBAA7B,CAEA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CAkBA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,EAA9B,C,GA2CDC,CAAAA,M,+PAUK,iBAC2C,KAAKC,KADhD,CACCC,QADD,aACCA,QADD,CACWC,IADX,aACWA,IADX,CACiBC,KADjB,aACiBA,KADjB,CACwBC,KADxB,aACwBA,KADxB,CACkCC,IADlC,8EAGCC,CAAAA,MAHD,CAGqCF,KAHrC,CAGCE,MAHD,CAGeC,WAHf,CAGqCH,KAHrC,CAGSF,IAHT,CAG4BM,IAH5B,CAGqCJ,KAHrC,CAG4BI,IAH5B,UAQQrB,UAAU,CAACsB,OAAX,CAAmBN,KAAnB,GAA6B,EARrC,CAKYO,gBALZ,MAKLC,eALK,qBAMLC,SANK,CAMLA,SANK,yBAMO,CANP,gBAOFC,SAPE,gEAUP,GAAIC,CAAAA,MAAJ,CAEA,GAAMH,CAAAA,eAAe,CAAGD,gBAAgB,CACpCA,gBADoC,CAEpCH,WAAW,EAAIC,IAAI,GAAK,UAAxB,CACAX,OAAO,CAACe,SAAD,CAAYN,MAAM,CAACS,OAAnB,CADP,CAEAT,MAAM,CAACU,OAJX,CAKA,GAAI,MAAOd,CAAAA,IAAP,GAAgB,SAApB,CAA+B,CAC7BY,MAAM,CAAGZ,IAAT,CACD,CAFD,IAEO,CACLY,MAAM,CACJH,eAAe,GAAK,aAApB,CACI,KADJ,CAEI,CAACvB,KAAK,CAACuB,eAAD,CAAL,CAAuBM,OAAvB,EAHP,CAID,CAED,GAAIC,CAAAA,mBAAmB,CAAG,KAA1B,CACA,GAAIC,CAAAA,oBAAoB,CAAG,KAA3B,CACA,GAAIC,CAAAA,qBAAqB,CAAG,KAA5B,CACA,GAAIlC,QAAQ,CAACmC,EAAT,GAAgB,KAApB,CAA2B,CACzB,GAAIC,CAAAA,gBAAgB,CAAG,KAAvB,CACA,GAAIC,CAAAA,cAAc,CAAG,CAArB,CACA,GAAIC,CAAAA,eAAe,CAAG,CAAtB,CAEAxC,KAAK,CAACyC,QAAN,CAAeC,OAAf,CAAuBzB,QAAvB,CAAiC,SAAA0B,KAAK,CAAI,CACxC,GAAI3C,KAAK,CAAC4C,cAAN,CAAqBD,KAArB,CAAJ,CAAiC,CAC/B,GAAIA,KAAK,CAACE,IAAN,GAAexC,aAAnB,CAAkC,CAChCiC,gBAAgB,CAAG,IAAnB,CACD,CAFD,IAEO,IAAIA,gBAAJ,CAAsB,CAC3BE,eAAe,GAChB,CAFM,IAEA,CACLD,cAAc,GACf,CACF,CACF,CAVD,EAYAL,mBAAmB,CACjBI,gBAAgB,EAAKC,cAAc,CAAG,CAAjB,EAAsBC,eAAe,CAAG,CAD/D,CAEAL,oBAAoB,CAAGD,mBAAmB,EAAIK,cAAc,GAAK,CAAjE,CACAH,qBAAqB,CAAGF,mBAAmB,EAAIM,eAAe,GAAK,CAAnE,CACD,CACD,MACE,qBAAC,OAAD,WAEE,KAAK,CAAE,CAAC,CAAEb,eAAe,CAAfA,eAAF,CAAD,CAAsBmB,MAAM,CAACC,MAA7B,CAAqC,CAAEnB,SAAS,CAATA,SAAF,CAArC,CAAoDC,SAApD,CAFT,EAGMR,IAHN,oDAKGc,oBAAoB,CAAG,oBAAC,IAAD,EAAM,KAAK,CAAEW,MAAM,CAACE,OAApB,kDAAH,CAAqC,IAL5D,CAMGhD,KAAK,CAACyC,QAAN,CAAeQ,OAAf,CAAuBhC,QAAvB,EACEiC,MADF,CACS,SAAAP,KAAK,QAAIA,CAAAA,KAAK,EAAI,IAAT,EAAiB,MAAOA,CAAAA,KAAP,GAAiB,SAAtC,EADd,EAEEQ,GAFF,CAEM,SAACR,KAAD,CAAQS,CAAR,CAAc,CACjB,GACE,CAACpD,KAAK,CAAC4C,cAAN,CAAqBD,KAArB,CAAD,EACA,CAAC,CACCtC,aADD,CAECC,YAFD,CAGCC,gBAHD,EAKC8C,QALD,CAKUV,KAAK,CAACE,IALhB,CAFH,CAQE,CACA,MAAOF,CAAAA,KAAP,CACD,CAED,GAAM3B,CAAAA,KAAuD,CAAG,CAC9DZ,KAAK,CACH,MAAOuC,CAAAA,KAAK,CAAC3B,KAAN,CAAYZ,KAAnB,GAA6B,WAA7B,CACIuC,KAAK,CAAC3B,KAAN,CAAYZ,KADhB,CAEI0B,MAAM,CACNlB,KADM,CAEND,KANwD,CAAhE,CASA,GAAIgC,KAAK,CAACE,IAAN,GAAexC,aAAnB,CAAkC,CAChCW,KAAK,CAACG,KAAN,CAAc,CAEZiC,CAAC,GAAK,CAAN,EAAW,CAAEE,UAAU,CAAE,CAAd,CAFC,CAGZpB,mBAAmB,EAAI,CAAEqB,UAAU,CAAE,QAAd,CAHX,CAIZZ,KAAK,CAAC3B,KAAN,CAAYG,KAJA,CAAd,CAMD,CACD,MAAOnB,CAAAA,KAAK,CAACwD,YAAN,CAAmBb,KAAnB,CAA0B3B,KAA1B,CAAP,CACD,CAjCF,CANH,CAwCGoB,qBAAqB,CAAG,oBAAC,IAAD,EAAM,KAAK,CAAEU,MAAM,CAACE,OAApB,kDAAH,CAAqC,IAxC7D,CADF,CA4CD,C,oBAzGkBhD,KAAK,CAACyD,S,EAArB1C,M,CAEG2C,O,CAAUrD,a,CAFbU,M,CAIG4C,M,CAASrD,Y,CAJZS,M,CAMG6C,U,CAAarD,gB,CANhBQ,M,CAQG8C,M,CAASrD,Y,CAoGlB,GAAMsC,CAAAA,MAAM,CAAG3C,UAAU,CAAC2D,MAAX,CAAkB,CAC/Bf,MAAM,CAAE,CACNgB,MAAM,CAAEjD,qBADF,CAENkD,aAAa,CAAE,KAFT,CAGNT,UAAU,CAAE,QAHN,CAINU,iBAAiB,CAAE,CAJb,CAKNrC,SAAS,CAAE,CALL,CADuB,CAQ/BoB,OAAO,CAAE,CACPkB,KAAK,CAAE,EADA,CARsB,CAAlB,CAAf,CAaA,cAAexD,CAAAA,SAAS,CAACK,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  AppbarContent as _AppbarContent,\n} from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport AppbarHeader, { AppbarHeader as _AppbarHeader } from './AppbarHeader';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport { Theme } from '../../types';\nimport overlay from '../../styles/overlay';\n\ntype Props = Partial<React.ComponentProps<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     return (\n *       <Appbar style={styles.bottom}>\n *         <Appbar.Action icon=\"archive\" onPress={() => console.log('Pressed archive')} />\n *         <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *         <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *         <Appbar.Action icon=\"delete\" onPress={() => console.log('Pressed delete')} />\n *       </Appbar>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nclass Appbar extends React.Component<Props> {\n  // @component ./AppbarContent.tsx\n  static Content = AppbarContent;\n  // @component ./AppbarAction.tsx\n  static Action = AppbarAction;\n  // @component ./AppbarBackAction.tsx\n  static BackAction = AppbarBackAction;\n  // @component ./AppbarHeader.tsx\n  static Header = AppbarHeader;\n\n  render() {\n    const { children, dark, style, theme, ...rest } = this.props;\n\n    const { colors, dark: isDarkTheme, mode } = theme;\n    const {\n      backgroundColor: customBackground,\n      elevation = 4,\n      ...restStyle\n    }: ViewStyle = StyleSheet.flatten(style) || {};\n\n    let isDark: boolean;\n\n    const backgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    let shouldCenterContent = false;\n    let shouldAddLeftSpacing = false;\n    let shouldAddRightSpacing = false;\n    if (Platform.OS === 'ios') {\n      let hasAppbarContent = false;\n      let leftItemsCount = 0;\n      let rightItemsCount = 0;\n\n      React.Children.forEach(children, child => {\n        if (React.isValidElement(child)) {\n          if (child.type === AppbarContent) {\n            hasAppbarContent = true;\n          } else if (hasAppbarContent) {\n            rightItemsCount++;\n          } else {\n            leftItemsCount++;\n          }\n        }\n      });\n\n      shouldCenterContent =\n        hasAppbarContent && (leftItemsCount < 2 && rightItemsCount < 2);\n      shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n      shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n    }\n    return (\n      <Surface\n        //@ts-ignore\n        style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n        {...rest}\n      >\n        {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n        {React.Children.toArray(children)\n          .filter(child => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              !React.isValidElement(child) ||\n              ![\n                AppbarContent,\n                AppbarAction,\n                AppbarBackAction,\n                // @ts-ignore\n              ].includes(child.type)\n            ) {\n              return child;\n            }\n\n            const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n              color:\n                typeof child.props.color !== 'undefined'\n                  ? child.props.color\n                  : isDark\n                  ? white\n                  : black,\n            };\n\n            if (child.type === AppbarContent) {\n              props.style = [\n                // Since content is not first item, add extra left margin\n                i !== 0 && { marginLeft: 8 },\n                shouldCenterContent && { alignItems: 'center' },\n                child.props.style,\n              ];\n            }\n            return React.cloneElement(child, props);\n          })}\n        {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n"]}
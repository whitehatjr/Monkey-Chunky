{"version":3,"sources":["AppbarAction.tsx"],"names":["React","color","black","IconButton","AppbarAction","props","iconColor","alpha","rgb","string","icon","disabled","onPress","accessibilityLabel","rest","Component","displayName","defaultProps","size"],"mappings":"2kBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,KAAT,KAAsB,qBAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,eAAvB,C,GAkCqBC,CAAAA,Y,6RAOV,iBAWH,KAAKC,KAXF,+BAELJ,KAFK,CAEEK,SAFF,4BAEcL,KAAK,CAACC,KAAD,CAAL,CAChBK,KADgB,CACV,IADU,EAEhBC,GAFgB,GAGhBC,MAHgB,EAFd,mBAMLC,IANK,aAMLA,IANK,CAOLC,QAPK,aAOLA,QAPK,CAQLC,OARK,aAQLA,OARK,CASLC,kBATK,aASLA,kBATK,CAUFC,IAVE,kGAaP,MACE,qBAAC,UAAD,WACE,OAAO,CAAEF,OADX,CAEE,KAAK,CAAEN,SAFT,CAGE,IAAI,CAAEI,IAHR,CAIE,QAAQ,CAAEC,QAJZ,CAKE,kBAAkB,CAAEE,kBALtB,CAME,QAAQ,KANV,EAOMC,IAPN,mDADF,CAWD,C,0BA/BuCd,KAAK,CAACe,S,EAA3BX,Y,CACZY,W,CAAc,e,CADFZ,Y,CAGZa,Y,CAAe,CACpBC,IAAI,CAAE,EADc,C,QAHHd,Y","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport { black } from '../../styles/colors';\nimport IconButton from '../IconButton';\nimport { IconSource } from '../Icon';\n\ntype Props = React.ComponentProps<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n */\nexport default class AppbarAction extends React.Component<Props> {\n  static displayName = 'Appbar.Action';\n\n  static defaultProps = {\n    size: 24,\n  };\n\n  render() {\n    const {\n      color: iconColor = color(black)\n        .alpha(0.54)\n        .rgb()\n        .string(),\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      ...rest\n    } = this.props;\n\n    return (\n      <IconButton\n        onPress={onPress}\n        color={iconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        {...rest}\n      />\n    );\n  }\n}\n"]}
{"version":3,"sources":["DrawerItem.tsx"],"names":["color","React","View","StyleSheet","Text","Icon","TouchableRipple","withTheme","DrawerItem","props","icon","label","active","theme","style","onPress","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","font","fonts","medium","labelMargin","styles","container","borderRadius","wrapper","marginLeft","Component","displayName","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","marginRight"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Drawer.Item label=\"First Item\" />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass DrawerItem extends React.Component<Props> {\n  static displayName = 'Drawer.Item';\n\n  render() {\n    const { icon, label, active, theme, style, onPress, ...rest } = this.props;\n    const { colors, roundness } = theme;\n    const backgroundColor = active\n      ? color(colors.primary)\n          .alpha(0.12)\n          .rgb()\n          .string()\n      : 'transparent';\n    const contentColor = active\n      ? colors.primary\n      : color(colors.text)\n          .alpha(0.68)\n          .rgb()\n          .string();\n    const font = theme.fonts.medium;\n    const labelMargin = icon ? 32 : 0;\n\n    return (\n      <View\n        {...rest}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          style={{ borderRadius: roundness }}\n          accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={active ? ['selected'] : []}\n        >\n          <View style={styles.wrapper}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]}
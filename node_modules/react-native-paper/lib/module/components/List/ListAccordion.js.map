{"version":3,"sources":["ListAccordion.tsx"],"names":["color","React","View","StyleSheet","TouchableRipple","Icon","Text","withTheme","ListAccordionGroupContext","ListAccordion","state","expanded","props","handlePress","onPress","undefined","setState","left","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","Error","expandedId","onAccordionPress","styles","container","row","primary","item","content","multiline","Children","map","child","isValidElement","right","cloneElement","Component","displayName","defaultProps","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport Icon from '../Icon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\nimport {\n  ListAccordionGroupContext,\n  ListAccordionGroupContextType,\n} from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Checkbox } from 'react-native-paper';\n *\n * class MyComponent extends React.Component {\n *   state = {\n *     expanded: true\n *   }\n *\n *   _handlePress = () =>\n *     this.setState({\n *       expanded: !this.state.expanded\n *     });\n *\n *   render() {\n *     return (\n *       <List.Section title=\"Accordions\">\n *         <List.Accordion\n *           title=\"Uncontrolled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *\n *         <List.Accordion\n *           title=\"Controlled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *           expanded={this.state.expanded}\n *           onPress={this._handlePress}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *       </List.Section>\n *     );\n *   }\n * }\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordion extends React.Component<Props, State> {\n  static displayName = 'List.Accordion';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  private handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState(state => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      left,\n      title,\n      description,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      titleNumberOfLines,\n      descriptionNumberOfLines,\n      style,\n      id,\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expandedInternal =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <ListAccordionGroupContext.Consumer>\n        {(groupContext: ListAccordionGroupContextType) => {\n          if (groupContext !== null && !id) {\n            throw new Error(\n              'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n            );\n          }\n          const expanded = groupContext\n            ? groupContext.expandedId === id\n            : expandedInternal;\n          const handlePress =\n            groupContext && id !== undefined\n              ? () => groupContext.onAccordionPress(id)\n              : this.handlePress;\n          return (\n            <View>\n              <TouchableRipple\n                style={[styles.container, style]}\n                onPress={handlePress}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n              >\n                <View style={styles.row} pointerEvents=\"none\">\n                  {left\n                    ? left({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View style={[styles.item, styles.content]}>\n                    <Text\n                      numberOfLines={titleNumberOfLines}\n                      style={[\n                        styles.title,\n                        {\n                          color: expanded ? theme.colors.primary : titleColor,\n                        },\n                        titleStyle,\n                      ]}\n                    >\n                      {title}\n                    </Text>\n                    {description && (\n                      <Text\n                        numberOfLines={descriptionNumberOfLines}\n                        style={[\n                          styles.description,\n                          {\n                            color: descriptionColor,\n                          },\n                          descriptionStyle,\n                        ]}\n                      >\n                        {description}\n                      </Text>\n                    )}\n                  </View>\n                  <View\n                    style={[\n                      styles.item,\n                      description ? styles.multiline : undefined,\n                    ]}\n                  >\n                    <Icon\n                      source={expanded ? 'chevron-up' : 'chevron-down'}\n                      color={titleColor}\n                      size={24}\n                    />\n                  </View>\n                </View>\n              </TouchableRipple>\n              {expanded\n                ? React.Children.map(children, child => {\n                    if (\n                      left &&\n                      React.isValidElement(child) &&\n                      !child.props.left &&\n                      !child.props.right\n                    ) {\n                      return React.cloneElement(child, {\n                        style: [styles.child, child.props.style],\n                      });\n                    }\n\n                    return child;\n                  })\n                : null}\n            </View>\n          );\n        }}\n      </ListAccordionGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]}
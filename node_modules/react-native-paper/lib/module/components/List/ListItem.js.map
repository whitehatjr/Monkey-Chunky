{"version":3,"sources":["ListItem.tsx"],"names":["color","React","StyleSheet","View","TouchableRipple","Text","withTheme","ListItem","descriptionColor","description","props","descriptionEllipsizeMode","descriptionStyle","descriptionNumberOfLines","ellipsizeMode","fontSize","styles","left","right","title","onPress","theme","style","titleStyle","titleNumberOfLines","titleEllipsizeMode","rest","titleColor","colors","text","alpha","rgb","string","container","row","iconMarginLeft","marginVerticalNone","item","content","renderDescription","iconMarginRight","Component","displayName","defaultProps","create","padding","flexDirection","marginVertical","marginLeft","marginRight","paddingLeft","flex","justifyContent"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  renderDescription(\n    descriptionColor: string,\n    description?: Description | null\n  ) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines,\n    } = this.props;\n\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left\n            ? left({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginLeft\n                  : {\n                      ...styles.iconMarginLeft,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n          <View style={[styles.item, styles.content]} pointerEvents=\"none\">\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={titleNumberOfLines}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description\n              ? this.renderDescription(descriptionColor, description)\n              : null}\n          </View>\n          {right\n            ? right({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginRight\n                  : {\n                      ...styles.iconMarginRight,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]}
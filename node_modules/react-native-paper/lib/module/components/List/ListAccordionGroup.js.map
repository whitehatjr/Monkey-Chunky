{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","state","expandedId","undefined","onAccordionPress","setState","currentExpandedId","props","children","Component","displayName"],"mappings":"qcAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAsBA,MAAO,IAAMC,CAAAA,yBAAyB,CAAGD,KAAK,CAACE,aAAN,CAEvC,IAFuC,CAAlC,C,GA0CDC,CAAAA,kB,8aAGJC,K,CAAe,CACbC,UAAU,CAAEC,SADC,C,OAIfC,gB,CAAmB,SAACF,UAAD,CAAiC,CAClD,MAAKG,QAAL,CAAc,kBAAeC,CAAAA,iBAAf,MAAGJ,UAAH,OAAwC,CACpDA,UAAU,CAAEI,iBAAiB,GAAKJ,UAAtB,CAAmCC,SAAnC,CAA+CD,UADP,CAAxC,EAAd,EAGD,C,qFAEQ,iBAC4C,KAAKK,KADjD,CACCL,UADD,aACCA,UADD,CACaE,gBADb,aACaA,gBADb,CAC+BI,QAD/B,aAC+BA,QAD/B,CAGP,MACE,qBAAC,yBAAD,CAA2B,QAA3B,EACE,KAAK,CAAE,CACLN,UAAU,CAAEA,UAAU,EAAI,KAAKD,KAAL,CAAWC,UADhC,CAELE,gBAAgB,CAAEA,gBAAgB,EAAI,KAAKA,gBAFtC,CADT,iDAMGI,QANH,CADF,CAUD,C,gCA1B8BX,KAAK,CAACY,S,EAAjCT,kB,CACGU,W,CAAc,qB,CA4BvB,cAAeV,CAAAA,kBAAf","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. Id prop for List.Accordion is required in order to group to work.\n * List.AccordionGroup can be controlled or uncontrolled component. Example shows uncontrolled version.\n * At most one Accordion will be expanded in given time.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * function MyComponent() {\n *  return (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n *  );\n * }\n *```\n */\n\ntype State = {\n  expandedId: string | number | undefined;\n};\n\nclass ListAccordionGroup extends React.Component<Props, State> {\n  static displayName = 'List.AccordionGroup';\n\n  state: State = {\n    expandedId: undefined,\n  };\n\n  onAccordionPress = (expandedId: string | number) => {\n    this.setState(({ expandedId: currentExpandedId }) => ({\n      expandedId: currentExpandedId === expandedId ? undefined : expandedId,\n    }));\n  };\n\n  render() {\n    const { expandedId, onAccordionPress, children } = this.props;\n\n    return (\n      <ListAccordionGroupContext.Provider\n        value={{\n          expandedId: expandedId || this.state.expandedId, // component can be controlled or uncontrolled\n          onAccordionPress: onAccordionPress || this.onAccordionPress,\n        }}\n      >\n        {children}\n      </ListAccordionGroupContext.Provider>\n    );\n  }\n}\n\nexport default ListAccordionGroup;\n"]}
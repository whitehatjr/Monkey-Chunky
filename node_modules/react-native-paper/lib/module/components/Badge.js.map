{"version":3,"sources":["Badge.tsx"],"names":["React","Animated","StyleSheet","color","black","white","withTheme","defaultSize","Badge","state","opacity","Value","props","visible","prevProps","timing","toValue","duration","useNativeDriver","start","children","size","style","theme","flatten","backgroundColor","colors","notification","restStyle","textColor","isLight","borderRadius","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","Component","defaultProps","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"ukBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OACEC,QADF,CAEEC,UAFF,KAMO,cANP,CAOA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAgBC,KAAhB,KAA6B,kBAA7B,CACA,OAASC,SAAT,KAA0B,iBAA1B,CAGA,GAAMC,CAAAA,WAAW,CAAG,EAApB,C,GA0CMC,CAAAA,K,0XAMJC,K,CAAQ,CACNC,OAAO,CAAE,GAAIT,CAAAA,QAAQ,CAACU,KAAb,CAAmB,MAAKC,KAAL,CAAWC,OAAX,CAAqB,CAArB,CAAyB,CAA5C,CADH,C,+FAIWC,S,CAAkB,IAC3BD,CAAAA,OAD2B,CACf,KAAKD,KADU,CAC3BC,OAD2B,CAGnC,GAAIA,OAAO,GAAKC,SAAS,CAACD,OAA1B,CAAmC,CACjCZ,QAAQ,CAACc,MAAT,CAAgB,KAAKN,KAAL,CAAWC,OAA3B,CAAoC,CAClCM,OAAO,CAAEH,OAAO,CAAG,CAAH,CAAO,CADW,CAElCI,QAAQ,CAAE,GAFwB,CAGlCC,eAAe,CAAE,IAHiB,CAApC,EAIGC,KAJH,GAKD,CACF,C,uCAEQ,iBACgD,KAAKP,KADrD,CACCQ,QADD,aACCA,QADD,8BACWC,IADX,CACWA,IADX,2BACkBd,WADlB,kBAC+Be,KAD/B,aAC+BA,KAD/B,CACsCC,KADtC,aACsCA,KADtC,IAECb,CAAAA,OAFD,CAEa,KAAKD,KAFlB,CAECC,OAFD,UAKLR,UAAU,CAACsB,OAAX,CAAmBF,KAAnB,GAA6B,EALxB,2BAICG,eAJD,CAICA,eAJD,+BAImBF,KAAK,CAACG,MAAN,CAAaC,YAJhC,sBAIiDC,SAJjD,oDAMP,GAAMC,CAAAA,SAAS,CAAG1B,KAAK,CAACsB,eAAD,CAAL,CAAuBK,OAAvB,GAAmC1B,KAAnC,CAA2CC,KAA7D,CAEA,GAAM0B,CAAAA,YAAY,CAAGV,IAAI,CAAG,CAA5B,CAEA,MACE,qBAAC,QAAD,CAAU,IAAV,EACE,aAAa,CAAE,CADjB,CAEE,KAAK,CAAE,gBAEHX,OAAO,CAAPA,OAFG,CAGHe,eAAe,CAAfA,eAHG,CAIHtB,KAAK,CAAE0B,SAJJ,CAKHG,QAAQ,CAAEX,IAAI,CAAG,GALd,EAMAE,KAAK,CAACU,KAAN,CAAYC,OANZ,EAOHC,UAAU,CAAEd,IAPT,CAQHe,MAAM,CAAEf,IARL,CASHgB,QAAQ,CAAEhB,IATP,CAUHU,YAAY,CAAZA,YAVG,GAYLO,MAAM,CAACC,SAZF,CAaLX,SAbK,CAFT,iDAkBGR,QAlBH,CADF,CAsBD,C,mBAtDiBpB,KAAK,CAACwC,S,EAApBhC,K,CACGiC,Y,CAAe,CACpB5B,OAAO,CAAE,IADW,CAEpBQ,IAAI,CAAEd,WAFc,C,CAwDxB,cAAeD,CAAAA,SAAS,CAACE,KAAD,CAAxB,CAEA,GAAM8B,CAAAA,MAAM,CAAGpC,UAAU,CAACwC,MAAX,CAAkB,CAC/BH,SAAS,CAAE,CACTI,SAAS,CAAE,UADF,CAETC,SAAS,CAAE,QAFF,CAGTC,iBAAiB,CAAE,QAHV,CAITC,iBAAiB,CAAE,CAJV,CAKTC,QAAQ,CAAE,QALD,CADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Badge extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    size: defaultSize,\n  };\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const { children, size = defaultSize, style, theme } = this.props;\n    const { opacity } = this.state;\n\n    const { backgroundColor = theme.colors.notification, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor = color(backgroundColor).isLight() ? black : white;\n\n    const borderRadius = size / 2;\n\n    return (\n      <Animated.Text\n        numberOfLines={1}\n        style={[\n          {\n            opacity,\n            backgroundColor,\n            color: textColor,\n            fontSize: size * 0.5,\n            ...theme.fonts.regular,\n            lineHeight: size,\n            height: size,\n            minWidth: size,\n            borderRadius,\n          },\n          styles.container,\n          restStyle,\n        ]}\n      >\n        {children}\n      </Animated.Text>\n    );\n  }\n}\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]}
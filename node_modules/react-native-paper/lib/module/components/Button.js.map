{"version":3,"sources":["Button.tsx"],"names":["React","Animated","View","StyleSheet","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","state","elevation","Value","props","mode","handlePressIn","timing","toValue","duration","start","handlePressOut","disabled","compact","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","onPress","style","theme","contentStyle","labelStyle","rest","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","textStyle","styles","button","content","label","compactLabel","uppercaseLabel","Component","defaultProps","create","minWidth","borderStyle","flexDirection","alignItems","justifyContent","width","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Button extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'text',\n    uppercase: true,\n  };\n\n  state = {\n    elevation: new Animated.Value(this.props.mode === 'contained' ? 2 : 0),\n  };\n\n  private handlePressIn = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 8,\n        duration: 200,\n      }).start();\n    }\n  };\n\n  private handlePressOut = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 2,\n        duration: 150,\n      }).start();\n    }\n  };\n\n  render() {\n    const {\n      disabled,\n      compact,\n      mode,\n      dark,\n      loading,\n      icon,\n      color: buttonColor,\n      children,\n      uppercase,\n      accessibilityLabel,\n      onPress,\n      style,\n      theme,\n      contentStyle,\n      labelStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const font = theme.fonts.medium;\n\n    let backgroundColor, borderColor, textColor, borderWidth;\n\n    if (mode === 'contained') {\n      if (disabled) {\n        backgroundColor = color(theme.dark ? white : black)\n          .alpha(0.12)\n          .rgb()\n          .string();\n      } else if (buttonColor) {\n        backgroundColor = buttonColor;\n      } else {\n        backgroundColor = colors.primary;\n      }\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    if (mode === 'outlined') {\n      borderColor = color(theme.dark ? white : black)\n        .alpha(0.29)\n        .rgb()\n        .string();\n      borderWidth = StyleSheet.hairlineWidth;\n    } else {\n      borderColor = 'transparent';\n      borderWidth = 0;\n    }\n\n    if (disabled) {\n      textColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else if (mode === 'contained') {\n      let isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark =\n          backgroundColor === 'transparent'\n            ? false\n            : !color(backgroundColor).isLight();\n      }\n\n      textColor = isDark ? white : black;\n    } else if (buttonColor) {\n      textColor = buttonColor;\n    } else {\n      textColor = colors.primary;\n    }\n\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n    const buttonStyle = {\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      borderRadius: roundness,\n    };\n    const touchableStyle = {\n      borderRadius: style\n        ? StyleSheet.flatten(style).borderRadius || roundness\n        : roundness,\n    };\n    const textStyle = { color: textColor, ...font };\n    const elevation =\n      disabled || mode !== 'contained' ? 0 : this.state.elevation;\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          styles.button,\n          compact && styles.compact,\n          { elevation } as ViewStyle,\n          buttonStyle,\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : []}\n          disabled={disabled}\n          rippleColor={rippleColor}\n          style={touchableStyle}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {icon && loading !== true ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={16} color={textColor} />\n              </View>\n            ) : null}\n            {loading ? (\n              <ActivityIndicator\n                size={16}\n                color={textColor}\n                style={styles.icon}\n              />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                compact && styles.compactLabel,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n                font,\n                labelStyle,\n              ]}\n            >\n              {children}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}
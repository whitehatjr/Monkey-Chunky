{"version":3,"sources":["Switch.tsx"],"names":["React","grey400","grey800","grey50","white","black","NativeModules","Platform","Switch","NativeSwitch","setColor","withTheme","version","PlatformConstants","reactNativeVersion","undefined","props","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","OS","dark","alpha","rgb","string","thumbTintColor","major","minor","thumbColor","trackColor","true","false","Component"],"mappings":"8jBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,MAA3B,CAAmCC,KAAnC,CAA0CC,KAA1C,KAAuD,kBAAvD,CACA,OACEC,aADF,CAEEC,QAFF,CAIEC,MAAM,GAAIC,CAAAA,YAJZ,KAMO,cANP,CAOA,MAAOC,CAAAA,QAAP,KAAqB,OAArB,CACA,OAASC,SAAT,KAA0B,iBAA1B,CAGA,GAAMC,CAAAA,OAAO,CAAGN,aAAa,CAACO,iBAAd,CACZP,aAAa,CAACO,iBAAd,CAAgCC,kBADpB,CAEZC,SAFJ,C,GA0EMP,CAAAA,M,+PACK,iBAQH,KAAKQ,KARF,CAELC,KAFK,aAELA,KAFK,CAGLC,QAHK,aAGLA,QAHK,CAILC,aAJK,aAILA,aAJK,CAKLC,KALK,aAKLA,KALK,CAMLC,KANK,aAMLA,KANK,CAOFC,IAPE,4FAUP,GAAMC,CAAAA,YAAY,CAAGH,KAAK,EAAIC,KAAK,CAACG,MAAN,CAAaC,MAA3C,CAEA,GAAMC,CAAAA,WAAW,CACfnB,QAAQ,CAACoB,EAAT,GAAgB,KAAhB,CACIJ,YADJ,CAEIL,QAAQ,CACRG,KAAK,CAACO,IAAN,CACElB,QAAQ,CAACN,KAAD,CAAR,CACGyB,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EADF,CAKErB,QAAQ,CAACL,KAAD,CAAR,CACGwB,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EANM,CAURrB,QAAQ,CAACa,YAAD,CAAR,CACGM,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EAbN,CAkBA,GAAMC,CAAAA,cAAc,CAClBzB,QAAQ,CAACoB,EAAT,GAAgB,KAAhB,CACIZ,SADJ,CAEIG,QAAQ,CACRG,KAAK,CAACO,IAAN,CACE1B,OADF,CAEED,OAHM,CAIRgB,KAAK,CACLM,YADK,CAELF,KAAK,CAACO,IAAN,CACA3B,OADA,CAEAE,MAXN,CAaA,GAAMa,CAAAA,KAAK,CACTJ,OAAO,EAAIA,OAAO,CAACqB,KAAR,GAAkB,CAA7B,EAAkCrB,OAAO,CAACsB,KAAR,EAAiB,EAAnD,CACI,CACER,WAAW,CAAXA,WADF,CAEEM,cAAc,CAAdA,cAFF,CADJ,CAKI,CACEG,UAAU,CAAEH,cADd,CAEEI,UAAU,CAAE,CACVC,IAAI,CAAEX,WADI,CAEVY,KAAK,CAAE,EAFG,CAFd,CANN,CAcA,MACE,qBAAC,YAAD,WACE,KAAK,CAAErB,KADT,CAEE,QAAQ,CAAEC,QAFZ,CAGE,aAAa,CAAEA,QAAQ,CAAGH,SAAH,CAAeI,aAHxC,EAIMH,KAJN,CAKMM,IALN,oDADF,CASD,C,oBAnEkBtB,KAAK,CAACuC,S,EAsE3B,cAAe5B,CAAAA,SAAS,CAACH,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ComponentProps<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     isSwitchOn: false,\n *   };\n *\n *   render() {\n *     const { isSwitchOn } = this.state;\n *     return (\n *       <Switch\n *         value={isSwitchOn}\n *         onValueChange={() =>\n *           { this.setState({ isSwitchOn: !isSwitchOn }); }\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Switch extends React.Component<Props> {\n  render() {\n    const {\n      value,\n      disabled,\n      onValueChange,\n      color,\n      theme,\n      ...rest\n    } = this.props;\n\n    const checkedColor = color || theme.colors.accent;\n\n    const onTintColor =\n      Platform.OS === 'ios'\n        ? checkedColor\n        : disabled\n        ? theme.dark\n          ? setColor(white)\n              .alpha(0.1)\n              .rgb()\n              .string()\n          : setColor(black)\n              .alpha(0.12)\n              .rgb()\n              .string()\n        : setColor(checkedColor)\n            .alpha(0.5)\n            .rgb()\n            .string();\n\n    const thumbTintColor =\n      Platform.OS === 'ios'\n        ? undefined\n        : disabled\n        ? theme.dark\n          ? grey800\n          : grey400\n        : value\n        ? checkedColor\n        : theme.dark\n        ? grey400\n        : grey50;\n\n    const props =\n      version && version.major === 0 && version.minor <= 56\n        ? {\n            onTintColor,\n            thumbTintColor,\n          }\n        : {\n            thumbColor: thumbTintColor,\n            trackColor: {\n              true: onTintColor,\n              false: '',\n            },\n          };\n\n    return (\n      <NativeSwitch\n        value={value}\n        disabled={disabled}\n        onValueChange={disabled ? undefined : onValueChange}\n        {...props}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport default withTheme(Switch);\n"]}
{"version":3,"sources":["IconButton.tsx"],"names":["React","View","StyleSheet","color","TouchableRipple","Icon","CrossFadeIcon","withTheme","IconButton","icon","customColor","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","buttonSize","styles","container","width","height","borderRadius","supported","top","left","bottom","right","create","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"+OAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OACEC,IADF,CAGEC,UAHF,KAMO,cANP,CAOA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,IAAP,KAAiC,QAAjC,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,OAASC,SAAT,KAA0B,iBAA1B,CAwEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAWN,IAVXC,CAAAA,IAUW,MAVXA,IAUW,CATJC,WASI,MATXP,KASW,gBARXQ,IAQW,CARXA,IAQW,oBARJ,EAQI,WAPXC,kBAOW,MAPXA,kBAOW,CANXC,QAMW,MANXA,QAMW,CALXC,OAKW,MALXA,OAKW,oBAJXC,QAIW,CAJXA,QAIW,wBAJA,KAIA,eAHXC,KAGW,MAHXA,KAGW,CAFXC,KAEW,MAFXA,KAEW,CADRC,IACQ,6HACX,GAAMC,CAAAA,SAAS,CACb,MAAOT,CAAAA,WAAP,GAAuB,WAAvB,CAAqCA,WAArC,CAAmDM,KAAK,CAACI,MAAN,CAAaC,IADlE,CAEA,GAAMC,CAAAA,WAAW,CAAGnB,KAAK,CAACgB,SAAD,CAAL,CACjBI,KADiB,CACX,IADW,EAEjBC,GAFiB,GAGjBC,MAHiB,EAApB,CAIA,GAAMC,CAAAA,aAAa,CAAGX,QAAQ,CAAGT,aAAH,CAAmBD,IAAjD,CACA,GAAMsB,CAAAA,UAAU,CAAGhB,IAAI,CAAG,GAA1B,CACA,MACE,qBAAC,eAAD,WACE,UAAU,KADZ,CAEE,QAAQ,KAFV,CAGE,OAAO,CAAEG,OAHX,CAIE,WAAW,CAAEQ,WAJf,CAKE,KAAK,CAAE,CACLM,MAAM,CAACC,SADF,CAEL,CAAEC,KAAK,CAAEH,UAAT,CAAqBI,MAAM,CAAEJ,UAA7B,CAAyCK,YAAY,CAAEL,UAAU,CAAG,CAApE,CAFK,CAGLd,QAAQ,EAAIe,MAAM,CAACf,QAHd,CAILI,KAJK,CALT,CAWE,kBAAkB,CAAEL,kBAXtB,CAYE,mBAAmB,CAAEC,QAAQ,CAAG,CAAC,QAAD,CAAW,UAAX,CAAH,CAA4B,QAZ3D,CAaE,0BAA0B,CAAC,QAb7B,CAcE,iBAAiB,CAAC,QAdpB,CAeE,mBAAmB,CAAEA,QAAQ,CAAG,CAAC,UAAD,CAAH,CAAkB,EAfjD,CAgBE,QAAQ,CAAEA,QAhBZ,CAiBE,OAAO,CAELT,eAAe,CAAC6B,SAAhB,CACI,CAAEC,GAAG,CAAE,EAAP,CAAWC,IAAI,CAAE,EAAjB,CAAqBC,MAAM,CAAE,EAA7B,CAAiCC,KAAK,CAAE,EAAxC,CADJ,CAEI,CAAEH,GAAG,CAAE,CAAP,CAAUC,IAAI,CAAE,CAAhB,CAAmBC,MAAM,CAAE,CAA3B,CAA8BC,KAAK,CAAE,CAArC,CArBR,EAuBMnB,IAvBN,oDAyBE,oBAAC,IAAD,mDACE,oBAAC,aAAD,EAAe,KAAK,CAAEC,SAAtB,CAAiC,MAAM,CAAEV,IAAzC,CAA+C,IAAI,CAAEE,IAArD,kDADF,CAzBF,CADF,CA+BD,CAnDD,CAqDA,GAAMiB,CAAAA,MAAM,CAAG1B,UAAU,CAACoC,MAAX,CAAkB,CAE/BT,SAAS,CAAE,CACTU,UAAU,CAAE,QADH,CAETC,cAAc,CAAE,QAFP,CAGTC,QAAQ,CAAE,QAHD,CAITC,MAAM,CAAE,CAJC,CAFoB,CAQ/B7B,QAAQ,CAAE,CACR8B,OAAO,CAAE,IADD,CARqB,CAAlB,CAAf,CAaA,cAAepC,CAAAA,SAAS,CAACC,UAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor)\n    .alpha(0.32)\n    .rgb()\n    .string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityStates={disabled ? ['disabled'] : []}\n      disabled={disabled}\n      hitSlop={\n        // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]}
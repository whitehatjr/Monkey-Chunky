{"version":3,"sources":["CardContent.tsx"],"names":["React","StyleSheet","View","CardContent","props","index","total","siblings","style","rest","cover","title","contentStyle","prev","next","styles","only","first","last","container","Component","displayName","create","paddingHorizontal","paddingTop","paddingBottom","paddingVertical"],"mappings":"wkBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,UAAT,CAAgCC,IAAhC,KAAuD,cAAvD,C,GA0CMC,CAAAA,W,wRAGK,iBAC4C,KAAKC,KADjD,CACCC,KADD,aACCA,KADD,CACQC,KADR,aACQA,KADR,CACeC,QADf,aACeA,QADf,CACyBC,KADzB,aACyBA,KADzB,CACmCC,IADnC,4EAEP,GAAMC,CAAAA,KAAK,CAAG,sBAAd,CACA,GAAMC,CAAAA,KAAK,CAAG,sBAAd,CAEA,GAAIC,CAAAA,YAAJ,CAAkBC,IAAlB,CAAwBC,IAAxB,CAEA,GAAI,MAAOT,CAAAA,KAAP,GAAiB,QAAjB,EAA6BE,QAAjC,CAA2C,CACzCM,IAAI,CAAGN,QAAQ,CAACF,KAAK,CAAG,CAAT,CAAf,CACAS,IAAI,CAAGP,QAAQ,CAACF,KAAK,CAAG,CAAT,CAAf,CACD,CAED,GACGQ,IAAI,GAAKH,KAAT,EAAkBI,IAAI,GAAKJ,KAA5B,EACCG,IAAI,GAAKF,KAAT,EAAkBG,IAAI,GAAKH,KAD5B,EAEAL,KAAK,GAAK,CAHZ,CAIE,CACAM,YAAY,CAAGG,MAAM,CAACC,IAAtB,CACD,CAND,IAMO,IAAIX,KAAK,GAAK,CAAd,CAAiB,CACtB,GAAIS,IAAI,GAAKJ,KAAT,EAAkBI,IAAI,GAAKH,KAA/B,CAAsC,CACpCC,YAAY,CAAGG,MAAM,CAACC,IAAtB,CACD,CAFD,IAEO,CACLJ,YAAY,CAAGG,MAAM,CAACE,KAAtB,CACD,CACF,CANM,IAMA,IAAI,MAAOX,CAAAA,KAAP,GAAiB,QAAjB,EAA6BD,KAAK,GAAKC,KAAK,CAAG,CAAnD,CAAsD,CAC3D,GAAIO,IAAI,GAAKH,KAAT,EAAkBG,IAAI,GAAKF,KAA/B,CAAsC,CACpCC,YAAY,CAAGG,MAAM,CAACC,IAAtB,CACD,CAFD,IAEO,CACLJ,YAAY,CAAGG,MAAM,CAACG,IAAtB,CACD,CACF,CANM,IAMA,IAAIL,IAAI,GAAKH,KAAT,EAAkBG,IAAI,GAAKF,KAA/B,CAAsC,CAC3CC,YAAY,CAAGG,MAAM,CAACE,KAAtB,CACD,CAFM,IAEA,IAAIH,IAAI,GAAKJ,KAAT,EAAkBI,IAAI,GAAKH,KAA/B,CAAsC,CAC3CC,YAAY,CAAGG,MAAM,CAACG,IAAtB,CACD,CAED,MAAO,qBAAC,IAAD,aAAUT,IAAV,EAAgB,KAAK,CAAE,CAACM,MAAM,CAACI,SAAR,CAAmBP,YAAnB,CAAiCJ,KAAjC,CAAvB,kDAAP,CACD,C,yBAxCuBR,KAAK,CAACoB,S,EAA1BjB,W,CACGkB,W,CAAc,c,CA0CvB,GAAMN,CAAAA,MAAM,CAAGd,UAAU,CAACqB,MAAX,CAAkB,CAC/BH,SAAS,CAAE,CACTI,iBAAiB,CAAE,EADV,CADoB,CAI/BN,KAAK,CAAE,CACLO,UAAU,CAAE,EADP,CAJwB,CAO/BN,IAAI,CAAE,CACJO,aAAa,CAAE,EADX,CAPyB,CAU/BT,IAAI,CAAE,CACJU,eAAe,CAAE,EADb,CAVyB,CAAlB,CAAf,CAeA,cAAevB,CAAAA,WAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\ntype Props = React.ComponentProps<typeof View> & {\n  /**\n   * Items inside the `Card.Content`.\n   */\n  children: React.ReactNode;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  /**\n   * @internal\n   */\n  siblings?: Array<string>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show content inside a Card.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Title, Paragraph } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass CardContent extends React.Component<Props> {\n  static displayName = 'Card.Content';\n\n  render() {\n    const { index, total, siblings, style, ...rest } = this.props;\n    const cover = 'withTheme(CardCover)';\n    const title = 'withTheme(CardTitle)';\n\n    let contentStyle, prev, next;\n\n    if (typeof index === 'number' && siblings) {\n      prev = siblings[index - 1];\n      next = siblings[index + 1];\n    }\n\n    if (\n      (prev === cover && next === cover) ||\n      (prev === title && next === title) ||\n      total === 1\n    ) {\n      contentStyle = styles.only;\n    } else if (index === 0) {\n      if (next === cover || next === title) {\n        contentStyle = styles.only;\n      } else {\n        contentStyle = styles.first;\n      }\n    } else if (typeof total === 'number' && index === total - 1) {\n      if (prev === cover || prev === title) {\n        contentStyle = styles.only;\n      } else {\n        contentStyle = styles.last;\n      }\n    } else if (prev === cover || prev === title) {\n      contentStyle = styles.first;\n    } else if (next === cover || next === title) {\n      contentStyle = styles.last;\n    }\n\n    return <View {...rest} style={[styles.container, contentStyle, style]} />;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  first: {\n    paddingTop: 16,\n  },\n  last: {\n    paddingBottom: 16,\n  },\n  only: {\n    paddingVertical: 16,\n  },\n});\n\nexport default CardContent;\n"]}
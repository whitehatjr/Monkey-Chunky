{"version":3,"sources":["Icon.tsx"],"names":["React","Image","I18nManager","Platform","Consumer","SettingsConsumer","accessibilityProps","withTheme","isImageSource","source","Object","prototype","hasOwnProperty","call","uri","OS","startsWith","test","getIconId","isValidIcon","isEqualIcon","a","b","Icon","color","size","theme","rest","direction","isRTL","s","iconColor","colors","text","transform","scaleX","width","height","tintColor","resizeMode","icon","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  I18nManager,\n  Platform,\n  ImageSourcePropType,\n} from 'react-native';\nimport { Consumer as SettingsConsumer } from '../core/settings';\nimport { accessibilityProps } from './MaterialCommunityIcon';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype IconSourceBase = string | ImageSourcePropType;\n\nexport type IconSource =\n  | IconSourceBase\n  | Readonly<{ source: IconSourceBase; direction: 'rtl' | 'ltr' | 'auto' }>\n  | ((props: IconProps & { color: string }) => React.ReactNode);\n\ntype IconProps = {\n  size: number;\n  allowFontScaling?: boolean;\n};\n\ntype Props = IconProps & {\n  color?: string;\n  source: any;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\nconst isImageSource = (source: any) =>\n  // source is an object with uri\n  (typeof source === 'object' &&\n    source !== null &&\n    (Object.prototype.hasOwnProperty.call(source, 'uri') &&\n      typeof source.uri === 'string')) ||\n  // source is a module, e.g. - require('image')\n  typeof source === 'number' ||\n  // image url on web\n  (Platform.OS === 'web' &&\n    typeof source === 'string' &&\n    (source.startsWith('data:image') ||\n      /\\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source)));\n\nconst getIconId = (source: any) => {\n  if (\n    typeof source === 'object' &&\n    source !== null &&\n    (Object.prototype.hasOwnProperty.call(source, 'uri') &&\n      typeof source.uri === 'string')\n  ) {\n    return source.uri;\n  }\n\n  return source;\n};\n\nexport const isValidIcon = (source: any) =>\n  typeof source === 'string' || isImageSource(source);\n\nexport const isEqualIcon = (a: any, b: any) =>\n  a === b || getIconId(a) === getIconId(b);\n\nconst Icon = ({ source, color, size, theme, ...rest }: Props) => {\n  const direction =\n    // @ts-ignore\n    typeof source === 'object' && source.direction && source.source\n      ? source.direction === 'auto'\n        ? I18nManager.isRTL\n          ? 'rtl'\n          : 'ltr'\n        : source.direction\n      : null;\n  const s =\n    // @ts-ignore\n    typeof source === 'object' && source.direction && source.source\n      ? source.source\n      : source;\n  const iconColor = color || theme.colors.text;\n\n  if (isImageSource(s)) {\n    return (\n      <Image\n        {...rest}\n        source={s}\n        style={[\n          {\n            transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n          },\n          // eslint-disable-next-line react-native/no-inline-styles\n          {\n            width: size,\n            height: size,\n            tintColor: color,\n            resizeMode: 'contain',\n          },\n        ]}\n        {...accessibilityProps}\n      />\n    );\n  } else if (typeof s === 'string') {\n    return (\n      <SettingsConsumer>\n        {({ icon }) => {\n          return icon({\n            name: s,\n            color: iconColor,\n            size,\n            direction,\n          });\n        }}\n      </SettingsConsumer>\n    );\n  } else if (typeof s === 'function') {\n    return s({ color: iconColor, size, direction });\n  }\n\n  return null;\n};\n\nexport default withTheme(Icon);\n"]}
{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["React","Animated","View","StyleSheet","color","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","state","borderAnim","Value","radioAnim","prevProps","status","props","setValue","timing","toValue","duration","start","disabled","onPress","theme","rest","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","checked","fade","undefined","value","styles","container","radio","borderColor","borderWidth","absoluteFill","radioContainer","dot","backgroundColor","transform","scale","Component","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, radioColor;\n\n    const checked = this.props.status === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      radioColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      radioColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={\n          disabled\n            ? undefined\n            : () => {\n                onPress && onPress(this.props.value);\n              }\n        }\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType={\n          checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n        }\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View\n          style={[\n            styles.radio,\n            {\n              borderColor: radioColor,\n              borderWidth: this.state.borderAnim,\n            },\n          ]}\n        >\n          {checked ? (\n            <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n              <Animated.View\n                style={[\n                  styles.dot,\n                  {\n                    backgroundColor: radioColor,\n                    transform: [{ scale: this.state.radioAnim }],\n                  },\n                ]}\n              />\n            </View>\n          ) : null}\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]}
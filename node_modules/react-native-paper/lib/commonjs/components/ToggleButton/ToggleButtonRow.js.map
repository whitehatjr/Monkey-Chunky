{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","props","value","onValueChange","children","style","count","React","Children","styles","row","map","child","i","type","ToggleButton","cloneElement","button","first","last","middle","Component","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":"ktBAAA,oDACA,yCACA,oE,0HA8CMA,CAAAA,e,4WAGK,iBAC2C,KAAKC,KADhD,CACCC,KADD,aACCA,KADD,CACQC,aADR,aACQA,aADR,CACuBC,QADvB,aACuBA,QADvB,CACiCC,KADjC,aACiCA,KADjC,CAEP,GAAMC,CAAAA,KAAK,CAAGC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAqBF,QAArB,CAAd,CAEA,MACE,qBAAC,qBAAD,CAAc,KAAd,EAAoB,KAAK,CAAEF,KAA3B,CAAkC,aAAa,CAAEC,aAAjD,iDACE,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAACM,MAAM,CAACC,GAAR,CAAaL,KAAb,CAAb,iDACGE,KAAK,CAACC,QAAN,CAAeG,GAAf,CAAmBP,QAAnB,CAA6B,SAACQ,KAAD,CAAQC,CAAR,CAAc,CAE1C,GAAID,KAAK,EAAIA,KAAK,CAACE,IAAN,GAAeC,qBAA5B,CAA0C,CAExC,MAAOR,CAAAA,KAAK,CAACS,YAAN,CAAmBJ,KAAnB,CAA0B,CAC/BP,KAAK,CAAE,CACLI,MAAM,CAACQ,MADF,CAELJ,CAAC,GAAK,CAAN,CACIJ,MAAM,CAACS,KADX,CAEIL,CAAC,GAAKP,KAAK,CAAG,CAAd,CACAG,MAAM,CAACU,IADP,CAEAV,MAAM,CAACW,MANN,CAQLR,KAAK,CAACX,KAAN,CAAYI,KARP,CADwB,CAA1B,CAAP,CAYD,CAED,MAAOO,CAAAA,KAAP,CACD,CAnBA,CADH,CADF,CADF,CA0BD,C,6BAjC2BL,KAAK,CAACc,S,EAA9BrB,e,CACGsB,W,CAAc,kB,CAmCvB,GAAMb,CAAAA,MAAM,CAAGc,wBAAWC,MAAX,CAAkB,CAC/Bd,GAAG,CAAE,CACHe,aAAa,CAAE,KADZ,CAD0B,CAI/BR,MAAM,CAAE,CACNS,WAAW,CAAEH,wBAAWI,aADlB,CAJuB,CAQ/BT,KAAK,CAAE,CACLU,oBAAoB,CAAE,CADjB,CAELC,uBAAuB,CAAE,CAFpB,CARwB,CAa/BT,MAAM,CAAE,CACNU,YAAY,CAAE,CADR,CAENC,eAAe,CAAE,CAFX,CAbuB,CAkB/BZ,IAAI,CAAE,CACJY,eAAe,CAAE,CADb,CAEJC,mBAAmB,CAAE,CAFjB,CAGJC,sBAAsB,CAAE,CAHpB,CAlByB,CAAlB,CAAf,C,aAyBejC,e","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { ToggleButton } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'left',\n *   };\n *\n *   render() {\n *     return(\n *       <ToggleButton.Row\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *           <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *       </ToggleButton.Row>\n *     )\n *   }\n * }\n *```\n */\nclass ToggleButtonRow extends React.Component<Props> {\n  static displayName = 'ToggleButton.Row';\n\n  render() {\n    const { value, onValueChange, children, style } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButton.Group value={value} onValueChange={onValueChange}>\n        <View style={[styles.row, style]}>\n          {React.Children.map(children, (child, i) => {\n            // @ts-ignore\n            if (child && child.type === ToggleButton) {\n              // @ts-ignore\n              return React.cloneElement(child, {\n                style: [\n                  styles.button,\n                  i === 0\n                    ? styles.first\n                    : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                  // @ts-ignore\n                  child.props.style,\n                ],\n              });\n            }\n\n            return child;\n          })}\n        </View>\n      </ToggleButton.Group>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n"]}
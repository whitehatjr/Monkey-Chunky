{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","props","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","backgroundColor","checked","dark","e","onValueChange","styles","content","borderColor","white","black","alpha","rgb","string","React","Component","Group","ToggleButtonGroup","Row","ToggleButtonRow","StyleSheet","create","width","height","margin"],"mappings":"k5BAAA,oDACA,yCAMA,2CACA,oDACA,iEACA,+EAGA,0EACA,2C,uHA+EMA,CAAAA,Y,6VAOK,iBAYH,KAAKC,KAZF,CAELC,IAFK,aAELA,IAFK,CAGLC,IAHK,aAGLA,IAHK,CAILC,KAJK,aAILA,KAJK,CAKLC,kBALK,aAKLA,kBALK,CAMLC,QANK,aAMLA,QANK,CAOLC,KAPK,aAOLA,KAPK,CAQLC,KARK,aAQLA,KARK,CASLC,MATK,aASLA,MATK,CAULC,QAVK,aAULA,OAVK,CAWFC,IAXE,+IAaP,GAAMC,CAAAA,YAAY,CAAGR,KAAK,CAACS,SAA3B,CAEA,MACE,qBAAC,2CAAD,CAA0B,QAA1B,mDACG,SAACC,OAAD,CAAgE,CAC/D,GAAIC,CAAAA,eAAJ,CAEA,GAAMC,CAAAA,OAAuB,CAC1BF,OAAO,EAAIA,OAAO,CAACN,KAAR,GAAkBA,KAA9B,EAAwCC,MAAM,GAAK,SADrD,CAGA,GAAIO,OAAJ,CAAa,CACXD,eAAe,CAAGX,KAAK,CAACa,IAAN,CACd,0BADc,CAEd,oBAFJ,CAGD,CAJD,IAIO,CACLF,eAAe,CAAG,aAAlB,CACD,CAED,MACE,qBAAC,mBAAD,wBACE,UAAU,CAAE,KADd,CAEE,IAAI,CAAEb,IAFR,CAGE,OAAO,CAAE,iBAACgB,CAAD,CAAwC,CAC/C,GAAIR,QAAJ,CAAa,CACXA,QAAO,CAACQ,CAAD,CAAP,CACD,CAED,GAAIJ,OAAJ,CAAa,CACXA,OAAO,CAACK,aAAR,CAAsB,CAACH,OAAD,CAAWR,KAAX,CAAmB,IAAzC,EACD,CACF,CAXH,CAYE,IAAI,CAAEL,IAZR,CAaE,kBAAkB,CAAEE,kBAbtB,CAcE,QAAQ,CAAEC,QAdZ,CAeE,KAAK,CAAE,CACLc,MAAM,CAACC,OADF,CAEL,CACEN,eAAe,CAAfA,eADF,CAEEH,YAAY,CAAZA,YAFF,CAGEU,WAAW,CAAE,mBAAMlB,KAAK,CAACa,IAAN,CAAaM,aAAb,CAAqBC,aAA3B,EACVC,KADU,CACJ,IADI,EAEVC,GAFU,GAGVC,MAHU,EAHf,CAFK,CAULpB,KAVK,CAfT,EA2BMI,IA3BN,oDADF,CA+BD,CA9CH,CADF,CAkDD,C,0BAxEwBiB,KAAK,CAACC,S,EAA3B7B,Y,CAEG8B,K,CAAQC,0B,CAFX/B,Y,CAKGgC,G,CAAMC,wB,CAsEf,GAAMb,CAAAA,MAAM,CAAGc,wBAAWC,MAAX,CAAkB,CAC/Bd,OAAO,CAAE,CACPe,KAAK,CAAE,EADA,CAEPC,MAAM,CAAE,EAFD,CAGPC,MAAM,CAAE,CAHD,CADsB,CAAlB,CAAf,C,aAQe,uBAAUtC,YAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport ToggleButtonRow from './ToggleButtonRow';\nimport { black, white } from '../../styles/colors';\nimport { IconSource } from '../Icon';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * class ToggleButtonExample extends React.Component {\n *   state = {\n *     status: 'checked',\n *   };\n *\n *   render() {\n *     return (\n *       <ToggleButton\n *         icon=\"bluetooth\"\n *         value=\"bluetooth\"\n *         status={this.state.status}\n *         onPress={value =>\n *           this.setState({\n *             status: value === 'checked' ? 'unchecked' : 'checked',\n *           })\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass ToggleButton extends React.Component<Props> {\n  // @component ./ToggleButtonGroup.tsx\n  static Group = ToggleButtonGroup;\n\n  // @component ./ToggleButtonRow.tsx\n  static Row = ToggleButtonRow;\n\n  render() {\n    const {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    } = this.props;\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(context: { value: string; onValueChange: Function } | null) => {\n          let backgroundColor;\n\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          if (checked) {\n            backgroundColor = theme.dark\n              ? 'rgba(255, 255, 255, .12)'\n              : 'rgba(0, 0, 0, .08)';\n          } else {\n            backgroundColor = 'transparent';\n          }\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor: color(theme.dark ? white : black)\n                    .alpha(0.29)\n                    .rgb()\n                    .string(),\n                },\n                style,\n              ]}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]}
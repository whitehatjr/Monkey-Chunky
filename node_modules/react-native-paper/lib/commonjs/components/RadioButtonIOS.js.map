{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","props","disabled","onPress","theme","rest","checkedColor","colors","color","accent","rippleColor","checked","status","text","alpha","rgb","string","fade","undefined","styles","container","opacity","React","Component","displayName","StyleSheet","create","borderRadius","padding"],"mappings":"y6BAAA,oDACA,yCACA,oDACA,oDACA,0EACA,wC,4GA6CMA,CAAAA,c,uWAGK,iBACuC,KAAKC,KAD5C,CACCC,QADD,aACCA,QADD,CACWC,OADX,aACWA,OADX,CACoBC,KADpB,aACoBA,KADpB,CAC8BC,IAD9B,mFAGP,GAAMC,CAAAA,YAAY,CAAGJ,QAAQ,CACzBE,KAAK,CAACG,MAAN,CAAaL,QADY,CAEzB,KAAKD,KAAL,CAAWO,KAAX,EAAoBJ,KAAK,CAACG,MAAN,CAAaE,MAFrC,CAIA,GAAIC,CAAAA,WAAJ,CAEA,GAAMC,CAAAA,OAAO,CAAG,KAAKV,KAAL,CAAWW,MAAX,GAAsB,SAAtC,CAEA,GAAIV,QAAJ,CAAc,CACZQ,WAAW,CAAG,mBAAMN,KAAK,CAACG,MAAN,CAAaM,IAAnB,EACXC,KADW,CACL,IADK,EAEXC,GAFW,GAGXC,MAHW,EAAd,CAID,CALD,IAKO,CACLN,WAAW,CAAG,mBAAMJ,YAAN,EACXW,IADW,CACN,IADM,EAEXF,GAFW,GAGXC,MAHW,EAAd,CAID,CACD,MACE,qBAAC,wBAAD,0BACMX,IADN,EAEE,UAAU,KAFZ,CAGE,WAAW,CAAEK,WAHf,CAIE,OAAO,CACLR,QAAQ,CACJgB,SADI,CAEJ,UAAM,CACJf,OAAO,EAAIA,OAAO,EAAlB,CACD,CATT,CAWE,mBAAmB,CAAED,QAAQ,CAAG,CAAC,QAAD,CAAW,UAAX,CAAH,CAA4B,QAX3D,CAYE,0BAA0B,CACxBS,OAAO,CAAG,qBAAH,CAA2B,uBAbtC,CAeE,iBAAiB,CAAC,QAfpB,CAgBE,mBAAmB,CAAET,QAAQ,CAAG,CAAC,UAAD,CAAH,CAAkB,EAhBjD,CAiBE,uBAAuB,CAAC,QAjB1B,CAkBE,KAAK,CAAEiB,MAAM,CAACC,SAlBhB,kDAoBE,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAAEC,OAAO,CAAEV,OAAO,CAAG,CAAH,CAAO,CAAzB,CAAb,iDACE,oBAAC,aAAD,EACE,gBAAgB,CAAE,KADpB,CAEE,MAAM,CAAC,OAFT,CAGE,IAAI,CAAE,EAHR,CAIE,KAAK,CAAEL,YAJT,iDADF,CApBF,CADF,CA+BD,C,4BAxD0BgB,KAAK,CAACC,S,wCAA7BvB,c,CACGwB,W,CAAc,iB,CA0DvB,GAAML,CAAAA,MAAM,CAAGM,wBAAWC,MAAX,CAAkB,CAC/BN,SAAS,CAAE,CACTO,YAAY,CAAE,EADL,CAETC,OAAO,CAAE,CAFA,CADoB,CAAlB,CAAf,C,aAOe,uBAAU5B,cAAV,C","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    const { disabled, onPress, theme, ...rest } = this.props;\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    const checked = this.props.status === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={\n          disabled\n            ? undefined\n            : () => {\n                onPress && onPress();\n              }\n        }\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType={\n          checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n        }\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: checked ? 1 : 0 }}>\n          <Icon\n            allowFontScaling={false}\n            source=\"check\"\n            size={24}\n            color={checkedColor}\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]}
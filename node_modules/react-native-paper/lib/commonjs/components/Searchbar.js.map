{"version":3,"sources":["Searchbar.tsx"],"names":["Searchbar","handleClearPress","clear","props","onChangeText","args","root","setNativeProps","isFocused","focus","blur","placeholder","onIconPress","icon","value","theme","style","customIconColor","iconColor","clearIcon","inputStyle","rest","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","size","color","I18nManager","isRTL","input","primary","c","React","Component","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\nimport { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     firstQuery: '',\n *   };\n *\n *   render() {\n *     const { firstQuery } = this.state;\n *     return (\n *       <Searchbar\n *         placeholder=\"Search\"\n *         onChangeText={query => { this.setState({ firstQuery: query }); }}\n *         value={firstQuery}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Searchbar extends React.Component<Props> {\n  private handleClearPress = () => {\n    this.clear();\n    this.props.onChangeText && this.props.onChangeText('');\n  };\n\n  private root: TextInput | undefined | null;\n\n  /**\n   * @internal\n   */ setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const {\n      placeholder,\n      onIconPress,\n      icon,\n      value,\n      theme,\n      style,\n      iconColor: customIconColor,\n      clearIcon,\n      inputStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark\n        ? textColor\n        : color(textColor)\n            .alpha(0.54)\n            .rgb()\n            .string());\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={c => {\n            this.root = c;\n          }}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={this.handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]}
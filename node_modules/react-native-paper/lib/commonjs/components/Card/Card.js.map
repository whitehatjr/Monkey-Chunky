{"version":3,"sources":["Card.tsx"],"names":["Card","state","elevation","Animated","Value","props","handlePressIn","timing","toValue","duration","start","handlePressOut","children","cardElevation","onLongPress","onPress","style","theme","testID","accessible","rest","roundness","total","React","Children","count","siblings","map","child","isValidElement","type","displayName","borderRadius","undefined","styles","innerContainer","index","cloneElement","Component","Content","CardContent","Actions","CardActions","Cover","CardCover","Title","CardTitle","defaultProps","StyleSheet","create","flexGrow"],"mappings":"k5BAAA,oDACA,yCAQA,kEACA,kEAEA,+DAEA,+DACA,2DACA,2C,uGAsEMA,CAAAA,I,0aAcJC,K,CAAQ,CAENC,SAAS,CAAE,GAAIC,uBAASC,KAAb,CAAmB,MAAKC,KAAL,CAAWH,SAA9B,CAFL,C,OAKAI,a,CAAgB,UAAM,CAC5BH,sBAASI,MAAT,CAAgB,MAAKN,KAAL,CAAWC,SAA3B,CAAsC,CACpCM,OAAO,CAAE,CAD2B,CAEpCC,QAAQ,CAAE,GAF0B,CAAtC,EAGGC,KAHH,GAID,C,OAEOC,c,CAAiB,UAAM,CAC7BR,sBAASI,MAAT,CAAgB,MAAKN,KAAL,CAAWC,SAA3B,CAAsC,CAEpCM,OAAO,CAAE,MAAKH,KAAL,CAAWH,SAFgB,CAGpCO,QAAQ,CAAE,GAH0B,CAAtC,EAIGC,KAJH,GAKD,C,oFAEQ,iBAYH,KAAKL,KAZF,CAELO,QAFK,aAELA,QAFK,CAIMC,aAJN,aAILX,SAJK,CAKLY,WALK,aAKLA,WALK,CAMLC,OANK,aAMLA,OANK,CAOLC,KAPK,aAOLA,KAPK,CAQLC,KARK,aAQLA,KARK,CASLC,MATK,aASLA,MATK,CAULC,UAVK,aAULA,UAVK,CAWFC,IAXE,8IAaClB,CAAAA,SAbD,CAae,KAAKD,KAbpB,CAaCC,SAbD,IAcCmB,CAAAA,SAdD,CAceJ,KAdf,CAcCI,SAdD,CAeP,GAAMC,CAAAA,KAAK,CAAGC,KAAK,CAACC,QAAN,CAAeC,KAAf,CAAqBb,QAArB,CAAd,CACA,GAAMc,CAAAA,QAAQ,CAAGH,KAAK,CAACC,QAAN,CAAeG,GAAf,CAAmBf,QAAnB,CAA6B,SAAAgB,KAAK,QACjDL,CAAAA,KAAK,CAACM,cAAN,CAAqBD,KAArB,GAA+BA,KAAK,CAACE,IAArC,CACKF,KAAK,CAACE,IAAP,CAAoBC,WADxB,CAEI,IAH6C,EAAlC,CAAjB,CAKA,MACE,qBAAC,gBAAD,wBACE,KAAK,CAAE,CAAC,CAAEC,YAAY,CAAEX,SAAhB,CAA2BnB,SAAS,CAATA,SAA3B,CAAD,CAAyCc,KAAzC,CADT,EAEMI,IAFN,oDAIE,oBAAC,qCAAD,EACE,YAAY,CAAE,CADhB,CAEE,QAAQ,CAAE,EAAEL,OAAO,EAAID,WAAb,CAFZ,CAGE,WAAW,CAAEA,WAHf,CAIE,OAAO,CAAEC,OAJX,CAKE,SAAS,CAAEA,OAAO,CAAG,KAAKT,aAAR,CAAwB2B,SAL5C,CAME,UAAU,CAAElB,OAAO,CAAG,KAAKJ,cAAR,CAAyBsB,SAN9C,CAOE,MAAM,CAAEf,MAPV,CAQE,UAAU,CAAEC,UARd,kDAUE,oBAAC,iBAAD,EAAM,KAAK,CAAEe,MAAM,CAACC,cAApB,kDACGZ,KAAK,CAACC,QAAN,CAAeG,GAAf,CAAmBf,QAAnB,CAA6B,SAACgB,KAAD,CAAQQ,KAAR,QAC5Bb,CAAAA,KAAK,CAACM,cAAN,CAAqBD,KAArB,EACIL,KAAK,CAACc,YAAN,CAAmBT,KAAnB,CAA0B,CACxBQ,KAAK,CAALA,KADwB,CAExBd,KAAK,CAALA,KAFwB,CAGxBI,QAAQ,CAARA,QAHwB,CAA1B,CADJ,CAMIE,KAPwB,EAA7B,CADH,CAVF,CAJF,CADF,CA6BD,C,kBApFgBL,KAAK,CAACe,S,EAAnBtC,I,CAEGuC,O,CAAUC,oB,CAFbxC,I,CAIGyC,O,CAAUC,oB,CAJb1C,I,CAMG2C,K,CAAQC,mB,CANX5C,I,CAQG6C,K,CAAQC,mB,CARX9C,I,CAUG+C,Y,CAAe,CACpB7C,SAAS,CAAE,CADS,C,CA6ExB,GAAMgC,CAAAA,MAAM,CAAGc,wBAAWC,MAAX,CAAkB,CAC/Bd,cAAc,CAAE,CACde,QAAQ,CAAE,CADI,CADe,CAAlB,CAAf,C,aAMe,uBAAUlD,IAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={(props) => <Avatar.Icon {...props} icon=\"folder\" />} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Card extends React.Component<Props, State> {\n  // @component ./CardContent.tsx\n  static Content = CardContent;\n  // @component ./CardActions.tsx\n  static Actions = CardActions;\n  // @component ./CardCover.tsx\n  static Cover = CardCover;\n  // @component ./CardTitle.tsx\n  static Title = CardTitle;\n\n  static defaultProps = {\n    elevation: 1,\n  };\n\n  state = {\n    // @ts-ignore\n    elevation: new Animated.Value(this.props.elevation),\n  };\n\n  private handlePressIn = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 8,\n      duration: 150,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    Animated.timing(this.state.elevation, {\n      // @ts-ignore\n      toValue: this.props.elevation,\n      duration: 150,\n    }).start();\n  };\n\n  render() {\n    const {\n      children,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      elevation: cardElevation,\n      onLongPress,\n      onPress,\n      style,\n      theme,\n      testID,\n      accessible,\n      ...rest\n    } = this.props;\n    const { elevation } = this.state;\n    const { roundness } = theme;\n    const total = React.Children.count(children);\n    const siblings = React.Children.map(children, child =>\n      React.isValidElement(child) && child.type\n        ? (child.type as any).displayName\n        : null\n    );\n    return (\n      <Surface\n        style={[{ borderRadius: roundness, elevation }, style]}\n        {...rest}\n      >\n        <TouchableWithoutFeedback\n          delayPressIn={0}\n          disabled={!(onPress || onLongPress)}\n          onLongPress={onLongPress}\n          onPress={onPress}\n          onPressIn={onPress ? this.handlePressIn : undefined}\n          onPressOut={onPress ? this.handlePressOut : undefined}\n          testID={testID}\n          accessible={accessible}\n        >\n          <View style={styles.innerContainer}>\n            {React.Children.map(children, (child, index) =>\n              React.isValidElement(child)\n                ? React.cloneElement(child, {\n                    index,\n                    total,\n                    siblings,\n                  })\n                : child\n            )}\n          </View>\n        </TouchableWithoutFeedback>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]}
{"version":3,"sources":["HelperText.tsx"],"names":["HelperText","state","shown","Animated","Value","props","visible","textHeight","showText","timing","toValue","duration","useNativeDriver","start","hideText","handleTextLayout","e","onLayout","setState","nativeEvent","layout","height","prevProps","prevState","style","type","theme","padding","rest","colors","dark","textColor","error","text","alpha","rgb","string","styles","color","opacity","transform","translateY","interpolate","inputRange","outputRange","children","React","PureComponent","defaultProps","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport { Theme, $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentProps<typeof Animated.Text>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\ntype State = {\n  shown: Animated.Value;\n  textHeight: number;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   render(){\n *     return (\n *       <View>\n *         <TextInput\n *           label=\"Email\"\n *           value={this.state.text}\n *           onChangeText={text => this.setState({ text })}\n *         />\n *         <HelperText\n *           type=\"error\"\n *           visible={!this.state.text.includes('@')}\n *         >\n *           Email address is invalid!\n *         </HelperText>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass HelperText extends React.PureComponent<Props, State> {\n  static defaultProps: Partial<Props> = {\n    type: 'info',\n    padding: 'normal',\n    visible: true,\n  };\n\n  state = {\n    shown: new Animated.Value(this.props.visible ? 1 : 0),\n    textHeight: 0,\n  };\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (\n      prevProps.visible !== this.props.visible ||\n      prevState.textHeight !== this.state.textHeight\n    ) {\n      if (this.props.visible) {\n        this.showText();\n      } else {\n        this.hideText();\n      }\n    }\n  }\n\n  private showText = () => {\n    Animated.timing(this.state.shown, {\n      toValue: 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideText = () => {\n    Animated.timing(this.state.shown, {\n      toValue: 0,\n      duration: 180,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private handleTextLayout = (e: LayoutChangeEvent) => {\n    this.props.onLayout && this.props.onLayout(e);\n    this.setState({\n      textHeight: e.nativeEvent.layout.height,\n    });\n  };\n\n  render() {\n    const {\n      style,\n      type,\n      visible,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onLayout,\n      padding,\n      ...rest\n    } = this.props;\n    const { colors, dark } = theme;\n\n    const textColor =\n      this.props.type === 'error'\n        ? colors.error\n        : color(colors.text)\n            .alpha(dark ? 0.7 : 0.54)\n            .rgb()\n            .string();\n\n    return (\n      <AnimatedText\n        onLayout={this.handleTextLayout}\n        style={[\n          styles.text,\n          padding !== 'none' ? styles.padding : {},\n          {\n            color: textColor,\n            opacity: this.state.shown,\n            transform:\n              visible && type === 'error'\n                ? [\n                    {\n                      translateY: this.state.shown.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [-this.state.textHeight / 2, 0],\n                      }),\n                    },\n                  ]\n                : [],\n          },\n          style,\n        ]}\n        {...rest}\n      >\n        {this.props.children}\n      </AnimatedText>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]}
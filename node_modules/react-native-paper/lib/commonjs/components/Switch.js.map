{"version":3,"sources":["Switch.tsx"],"names":["version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","props","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","Platform","OS","dark","white","alpha","rgb","string","black","thumbTintColor","grey800","grey400","grey50","major","minor","thumbColor","trackColor","true","false","React","Component"],"mappings":"k5BAAA,oDACA,wCACA,yCAOA,oDACA,wC,iGAGA,GAAMA,CAAAA,OAAO,CAAGC,2BAAcC,iBAAd,CACZD,2BAAcC,iBAAd,CAAgCC,kBADpB,CAEZC,SAFJ,C,GA0EMC,CAAAA,M,+TACK,iBAQH,KAAKC,KARF,CAELC,KAFK,aAELA,KAFK,CAGLC,QAHK,aAGLA,QAHK,CAILC,aAJK,aAILA,aAJK,CAKLC,KALK,aAKLA,KALK,CAMLC,KANK,aAMLA,KANK,CAOFC,IAPE,yGAUP,GAAMC,CAAAA,YAAY,CAAGH,KAAK,EAAIC,KAAK,CAACG,MAAN,CAAaC,MAA3C,CAEA,GAAMC,CAAAA,WAAW,CACfC,sBAASC,EAAT,GAAgB,KAAhB,CACIL,YADJ,CAEIL,QAAQ,CACRG,KAAK,CAACQ,IAAN,CACE,mBAASC,aAAT,EACGC,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EADF,CAKE,mBAASC,aAAT,EACGH,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EANM,CAUR,mBAASV,YAAT,EACGQ,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EAbN,CAkBA,GAAME,CAAAA,cAAc,CAClBR,sBAASC,EAAT,GAAgB,KAAhB,CACId,SADJ,CAEII,QAAQ,CACRG,KAAK,CAACQ,IAAN,CACEO,eADF,CAEEC,eAHM,CAIRpB,KAAK,CACLM,YADK,CAELF,KAAK,CAACQ,IAAN,CACAQ,eADA,CAEAC,cAXN,CAaA,GAAMtB,CAAAA,KAAK,CACTN,OAAO,EAAIA,OAAO,CAAC6B,KAAR,GAAkB,CAA7B,EAAkC7B,OAAO,CAAC8B,KAAR,EAAiB,EAAnD,CACI,CACEd,WAAW,CAAXA,WADF,CAEES,cAAc,CAAdA,cAFF,CADJ,CAKI,CACEM,UAAU,CAAEN,cADd,CAEEO,UAAU,CAAE,CACVC,IAAI,CAAEjB,WADI,CAEVkB,KAAK,CAAE,EAFG,CAFd,CANN,CAcA,MACE,qBAAC,mBAAD,wBACE,KAAK,CAAE3B,KADT,CAEE,QAAQ,CAAEC,QAFZ,CAGE,aAAa,CAAEA,QAAQ,CAAGJ,SAAH,CAAeK,aAHxC,EAIMH,KAJN,CAKMM,IALN,oDADF,CASD,C,oBAnEkBuB,KAAK,CAACC,S,eAsEZ,uBAAU/B,MAAV,C","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ComponentProps<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     isSwitchOn: false,\n *   };\n *\n *   render() {\n *     const { isSwitchOn } = this.state;\n *     return (\n *       <Switch\n *         value={isSwitchOn}\n *         onValueChange={() =>\n *           { this.setState({ isSwitchOn: !isSwitchOn }); }\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Switch extends React.Component<Props> {\n  render() {\n    const {\n      value,\n      disabled,\n      onValueChange,\n      color,\n      theme,\n      ...rest\n    } = this.props;\n\n    const checkedColor = color || theme.colors.accent;\n\n    const onTintColor =\n      Platform.OS === 'ios'\n        ? checkedColor\n        : disabled\n        ? theme.dark\n          ? setColor(white)\n              .alpha(0.1)\n              .rgb()\n              .string()\n          : setColor(black)\n              .alpha(0.12)\n              .rgb()\n              .string()\n        : setColor(checkedColor)\n            .alpha(0.5)\n            .rgb()\n            .string();\n\n    const thumbTintColor =\n      Platform.OS === 'ios'\n        ? undefined\n        : disabled\n        ? theme.dark\n          ? grey800\n          : grey400\n        : value\n        ? checkedColor\n        : theme.dark\n        ? grey400\n        : grey50;\n\n    const props =\n      version && version.major === 0 && version.minor <= 56\n        ? {\n            onTintColor,\n            thumbTintColor,\n          }\n        : {\n            thumbColor: thumbTintColor,\n            trackColor: {\n              true: onTintColor,\n              false: '',\n            },\n          };\n\n    return (\n      <NativeSwitch\n        value={value}\n        disabled={disabled}\n        onValueChange={disabled ? undefined : onValueChange}\n        {...props}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport default withTheme(Switch);\n"]}
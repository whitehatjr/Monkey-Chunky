{"version":3,"sources":["index.native.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","props","style","background","borderless","disabledProp","disabled","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","Platform","OS","Version","supported","TouchableNativeFeedback","Ripple","overflow","React","Children","only","fade","Component","defaultProps"],"mappings":"k5BAAA,oDACA,yCAUA,oDACA,2C,uHAGA,GAAMA,CAAAA,wBAAwB,CAAG,EAAjC,CACA,GAAMC,CAAAA,mBAAmB,CAAG,EAA5B,C,GAcMC,CAAAA,e,4WAQK,iBAWH,KAAKC,KAXF,CAELC,KAFK,aAELA,KAFK,CAGLC,UAHK,aAGLA,UAHK,CAILC,UAJK,aAILA,UAJK,CAKKC,YALL,aAKLC,QALK,CAMLC,WANK,aAMLA,WANK,CAOLC,aAPK,aAOLA,aAPK,CAQLC,QARK,aAQLA,QARK,CASLC,KATK,aASLA,KATK,CAUFC,IAVE,uJAaCC,CAAAA,IAbD,CAakBF,KAblB,CAaCE,IAbD,CAaOC,MAbP,CAakBH,KAblB,CAaOG,MAbP,CAcP,GAAMP,CAAAA,QAAQ,CAAGD,YAAY,EAAI,CAAC,KAAKJ,KAAL,CAAWa,OAA7C,CACA,GAAMC,CAAAA,qBAAqB,CACzBR,WAAW,EACX,mBAAMM,MAAM,CAACG,IAAb,EACGC,KADH,CACSL,IAAI,CAAG,IAAH,CAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CASA,GAAMC,CAAAA,aAAa,CACjBC,sBAASC,EAAT,GAAgB,SAAhB,EACAD,sBAASE,OAAT,EAAoBxB,mBADpB,EAEAK,UAHF,CAKA,GAAIJ,eAAe,CAACwB,SAApB,CAA+B,CAC7B,MACE,qBAAC,oCAAD,0BACMb,IADN,EAEE,QAAQ,CAAEL,QAFZ,CAGE,aAAa,CAAEc,aAHjB,CAIE,UAAU,CACRjB,UAAU,EAAI,IAAd,CACIA,UADJ,CAEIsB,qCAAwBC,MAAxB,CACEX,qBADF,CAEEX,UAFF,CAPR,kDAaE,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAACA,UAAU,EAAI,CAAEuB,QAAQ,CAAE,QAAZ,CAAf,CAAuCzB,KAAvC,CAAb,iDACG0B,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBrB,QAApB,CADH,CAbF,CADF,CAmBD,CAED,MACE,qBAAC,+BAAD,0BACME,IADN,EAEE,QAAQ,CAAEL,QAFZ,CAGE,KAAK,CAAE,CAACF,UAAU,EAAI,CAAEuB,QAAQ,CAAE,QAAZ,CAAf,CAAuCzB,KAAvC,CAHT,CAIE,aAAa,CACXM,aAAa,EAAI,IAAjB,CACIA,aADJ,CAEI,mBAAMO,qBAAN,EACGgB,IADH,CACQ,GADR,EAEGb,GAFH,GAGGC,MAHH,EAPR,kDAaGS,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBrB,QAApB,CAbH,CADF,CAiBD,C,6BA5E2BmB,KAAK,CAACI,S,EAA9BhC,e,CACGiC,Y,CAAe,CACpB7B,UAAU,CAAE,KADQ,C,CADlBJ,e,CAKGwB,S,CACLH,sBAASC,EAAT,GAAgB,SAAhB,EAA6BD,sBAASE,OAAT,EAAoBzB,wB,cAyEtC,uBAAUE,eAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: Theme;\n};\n\nclass TouchableRipple extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n  };\n\n  static supported =\n    Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n  render() {\n    const {\n      style,\n      background,\n      borderless,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    } = this.props;\n\n    const { dark, colors } = theme;\n    const disabled = disabledProp || !this.props.onPress;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n    // https://github.com/facebook/react-native/issues/6480\n    const useForeground =\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_PIE &&\n      borderless;\n\n    if (TouchableRipple.supported) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          disabled={disabled}\n          useForeground={useForeground}\n          background={\n            background != null\n              ? background\n              : TouchableNativeFeedback.Ripple(\n                  calculatedRippleColor,\n                  borderless\n                )\n          }\n        >\n          <View style={[borderless && { overflow: 'hidden' }, style]}>\n            {React.Children.only(children)}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableHighlight\n        {...rest}\n        disabled={disabled}\n        style={[borderless && { overflow: 'hidden' }, style]}\n        underlayColor={\n          underlayColor != null\n            ? underlayColor\n            : color(calculatedRippleColor)\n                .fade(0.5)\n                .rgb()\n                .string()\n        }\n      >\n        {React.Children.only(children)}\n      </TouchableHighlight>\n    );\n  }\n}\n\nexport default withTheme(TouchableRipple);\n"]}
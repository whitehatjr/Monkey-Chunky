{"version":3,"sources":["Divider.tsx"],"names":["Divider","props","inset","style","theme","rest","isDarkTheme","dark","styles","light","React","Component","StyleSheet","create","backgroundColor","black","alpha","rgb","string","height","hairlineWidth","white","marginLeft"],"mappings":"k5BAAA,oDACA,oDACA,yCACA,wCACA,wC,qGAoCMA,CAAAA,O,oUACK,iBACkC,KAAKC,KADvC,CACCC,KADD,aACCA,KADD,CACQC,KADR,aACQA,KADR,CACeC,KADf,aACeA,KADf,CACyBC,IADzB,iFAEOC,CAAAA,WAFP,CAEuBF,KAFvB,CAECG,IAFD,CAGP,MACE,qBAAC,iBAAD,0BACMF,IADN,EAEE,KAAK,CAAE,CACLC,WAAW,CAAGE,MAAM,CAACD,IAAV,CAAiBC,MAAM,CAACC,KAD9B,CAELP,KAAK,EAAIM,MAAM,CAACN,KAFX,CAGLC,KAHK,CAFT,kDADF,CAUD,C,qBAdmBO,KAAK,CAACC,S,EAiB5B,GAAMH,CAAAA,MAAM,CAAGI,wBAAWC,MAAX,CAAkB,CAC/BJ,KAAK,CAAE,CACLK,eAAe,CAAE,mBAAMC,aAAN,EACdC,KADc,CACR,IADQ,EAEdC,GAFc,GAGdC,MAHc,EADZ,CAKLC,MAAM,CAAEP,wBAAWQ,aALd,CADwB,CAQ/Bb,IAAI,CAAE,CACJO,eAAe,CAAE,mBAAMO,aAAN,EACdL,KADc,CACR,IADQ,EAEdC,GAFc,GAGdC,MAHc,EADb,CAKJC,MAAM,CAAEP,wBAAWQ,aALf,CARyB,CAe/BlB,KAAK,CAAE,CACLoB,UAAU,CAAE,EADP,CAfwB,CAAlB,CAAf,C,aAoBe,uBAAUtB,OAAV,C","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Apple</Text>\n *     <Divider />\n *     <Text>Orange</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Divider extends React.Component<Props> {\n  render() {\n    const { inset, style, theme, ...rest } = this.props;\n    const { dark: isDarkTheme } = theme;\n    return (\n      <View\n        {...rest}\n        style={[\n          isDarkTheme ? styles.dark : styles.light,\n          inset && styles.inset,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"]}
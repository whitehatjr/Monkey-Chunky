{"version":3,"sources":["overlay.tsx"],"names":["overlay","elevation","surfaceColor","DarkTheme","colors","surface","Animated","Value","inputRange","interpolate","outputRange","map","calculateColor","overlayTransparency","elevationOverlayTransparency","mix","hex"],"mappings":"oKAAA,oDACA,yCACA,8DAEe,QAASA,CAAAA,OAAT,EAGb,IAFAC,CAAAA,SAEA,2DAFqC,CAErC,IADAC,CAAAA,YACA,2DADuBC,mBAAUC,MAAV,CAAiBC,OACxC,CACA,GAAIJ,SAAS,WAAYK,uBAASC,KAAlC,CAAyC,CACvC,GAAMC,CAAAA,UAAU,CAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,EAAhB,CAAnB,CACA,MAAOP,CAAAA,SAAS,CAACQ,WAAV,CAAsB,CAC3BD,UAAU,CAAVA,UAD2B,CAE3BE,WAAW,CAAEF,UAAU,CAACG,GAAX,CAAe,SAAAV,SAAS,CAAI,CACvC,MAAOW,CAAAA,cAAc,CAACV,YAAD,CAAeD,SAAf,CAArB,CACD,CAFY,CAFc,CAAtB,CAAP,CAMD,CACD,MAAOW,CAAAA,cAAc,CAACV,YAAD,CAAeD,SAAf,CAArB,CACD,CACD,QAASW,CAAAA,cAAT,CAAwBV,YAAxB,CAA8CD,SAA9C,CAAiE,CAC/D,GAAIY,CAAAA,mBAAJ,CACA,GAAIZ,SAAS,EAAI,CAAb,EAAkBA,SAAS,EAAI,EAAnC,CAAuC,CACrCY,mBAAmB,CAAGC,4BAA4B,CAACb,SAAD,CAAlD,CACD,CAFD,IAEO,IAAIA,SAAS,CAAG,EAAhB,CAAoB,CACzBY,mBAAmB,CAAGC,4BAA4B,CAAC,EAAD,CAAlD,CACD,CAFM,IAEA,CACLD,mBAAmB,CAAGC,4BAA4B,CAAC,CAAD,CAAlD,CACD,CACD,MAAO,mBAAMZ,YAAN,EACJa,GADI,CACA,mBAAM,OAAN,CADA,CACgBF,mBAAmB,CAAG,IADtC,EAEJG,GAFI,EAAP,CAGD,CACD,GAAMF,CAAAA,4BAAsD,CAAG,CAC7D,EAAG,CAD0D,CAE7D,EAAG,CAF0D,CAG7D,EAAG,CAH0D,CAI7D,EAAG,CAJ0D,CAK7D,EAAG,EAL0D,CAM7D,EAAG,EAN0D,CAO7D,EAAG,IAP0D,CAQ7D,EAAG,EAR0D,CAS7D,EAAG,IAT0D,CAU7D,GAAI,EAVyD,CAW7D,GAAI,IAXyD,CAY7D,GAAI,EAZyD,CAa7D,GAAI,KAbyD,CAc7D,GAAI,IAdyD,CAe7D,GAAI,KAfyD,CAgB7D,GAAI,EAhByD,CAiB7D,GAAI,KAjByD,CAkB7D,GAAI,KAlByD,CAmB7D,GAAI,KAnByD,CAoB7D,GAAI,KApByD,CAqB7D,GAAI,IArByD,CAsB7D,GAAI,KAtByD,CAuB7D,GAAI,KAvByD,CAwB7D,GAAI,EAxByD,CAA/D","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nexport default function overlay(\n  elevation: number | Animated.Value = 1,\n  surfaceColor: string = DarkTheme.colors.surface\n) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map(elevation => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n  return calculateColor(surfaceColor, elevation);\n}\nfunction calculateColor(surfaceColor: string, elevation: number) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\nconst elevationOverlayTransparency: { [id: number]: number } = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]}
{"version":3,"sources":["index.js"],"names":["mappingsPath","process","env","NODE_ENV","mappings","require","SKIP","Symbol","module","exports","rewire","babel","t","types","visitor","ImportDeclaration","path","node","source","value","replaceWithMultiple","specifiers","reduce","declarations","specifier","mapping","imported","name","alias","identifier","local","s","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","push","importDeclaration","stringLiteral","previous","find","d","requeue"],"mappings":"AAAA,GAAMA,CAAAA,YAAY,CAChBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,MAAzB,gDADF,CAIA,GAAMC,CAAAA,QAAQ,CAAGC,OAAO,CAACL,YAAD,CAAxB,CAEA,GAAMM,CAAAA,IAAI,CAAGC,MAAM,CAAC,MAAD,CAAnB,CAEAC,MAAM,CAACC,OAAP,CAAiB,QAASC,CAAAA,MAAT,CAAgBC,KAAhB,CAAuB,CACtC,GAAMC,CAAAA,CAAC,CAAGD,KAAK,CAACE,KAAhB,CACA,MAAO,CACLC,OAAO,CAAE,CACPC,iBADO,4BACWC,IADX,CACiB,CACtB,GACEA,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,KAAjB,GAA2B,oBAA3B,EACAH,IAAI,CAACC,IAAL,CAAUX,IAAV,CAFF,CAGE,CACA,OACD,CAEDU,IAAI,CAACI,mBAAL,CACEJ,IAAI,CAACC,IAAL,CAAUI,UAAV,CAAqBC,MAArB,CAA4B,SAACC,YAAD,CAAeC,SAAf,CAA6B,CACvD,GAAMC,CAAAA,OAAO,CAAGrB,QAAQ,CAACoB,SAAS,CAACE,QAAV,CAAmBC,IAApB,CAAxB,CAEA,GAAIF,OAAJ,CAAa,CACX,GAAMG,CAAAA,KAAK,CAAMZ,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,KAAvB,KAAgCM,OAAO,CAACT,IAAnD,CACA,GAAMa,CAAAA,UAAU,CAAGjB,CAAC,CAACiB,UAAF,CAAaL,SAAS,CAACM,KAAV,CAAgBH,IAA7B,CAAnB,CAEA,GAAII,CAAAA,CAAJ,CAEA,OAAQN,OAAO,CAACE,IAAhB,EACE,IAAK,SAAL,CACEI,CAAC,CAAGnB,CAAC,CAACoB,sBAAF,CAAyBH,UAAzB,CAAJ,CACA,MACF,IAAK,GAAL,CACEE,CAAC,CAAGnB,CAAC,CAACqB,wBAAF,CAA2BJ,UAA3B,CAAJ,CACA,MACF,QACEE,CAAC,CAAGnB,CAAC,CAACsB,eAAF,CAAkBL,UAAlB,CAA8BjB,CAAC,CAACiB,UAAF,CAAaJ,OAAO,CAACE,IAArB,CAA9B,CAAJ,CARJ,CAWAJ,YAAY,CAACY,IAAb,CACEvB,CAAC,CAACwB,iBAAF,CAAoB,CAACL,CAAD,CAApB,CAAyBnB,CAAC,CAACyB,aAAF,CAAgBT,KAAhB,CAAzB,CADF,EAGD,CApBD,IAoBO,CACL,GAAMU,CAAAA,QAAQ,CAAGf,YAAY,CAACgB,IAAb,CACf,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACtB,MAAF,CAASC,KAAT,GAAmBH,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,KAAxC,EADc,CAAjB,CAIA,GAAImB,QAAJ,CAAc,CACZA,QAAQ,CAACjB,UAAT,CAAoBc,IAApB,CAAyBX,SAAzB,EACD,CAFD,IAEO,CACL,GAAMP,CAAAA,IAAI,CAAGL,CAAC,CAACwB,iBAAF,CAAoB,CAACZ,SAAD,CAApB,CAAiCR,IAAI,CAACC,IAAL,CAAUC,MAA3C,CAAb,CACAD,IAAI,CAACX,IAAD,CAAJ,CAAa,IAAb,CACAiB,YAAY,CAACY,IAAb,CAAkBlB,IAAlB,EACD,CACF,CAED,MAAOM,CAAAA,YAAP,CACD,CAtCD,CAsCG,EAtCH,CADF,EA0CAP,IAAI,CAACyB,OAAL,GACD,CApDM,CADJ,CAAP,CAwDD,CA1DD","sourcesContent":["const mappingsPath =\n  process.env.NODE_ENV === 'test'\n    ? `../../lib/mappings.json`\n    : `../../mappings.json`;\nconst mappings = require(mappingsPath);\n\nconst SKIP = Symbol('SKIP');\n\nmodule.exports = function rewire(babel) {\n  const t = babel.types;\n  return {\n    visitor: {\n      ImportDeclaration(path) {\n        if (\n          path.node.source.value !== 'react-native-paper' ||\n          path.node[SKIP]\n        ) {\n          return;\n        }\n\n        path.replaceWithMultiple(\n          path.node.specifiers.reduce((declarations, specifier) => {\n            const mapping = mappings[specifier.imported.name];\n\n            if (mapping) {\n              const alias = `${path.node.source.value}/${mapping.path}`;\n              const identifier = t.identifier(specifier.local.name);\n\n              let s;\n\n              switch (mapping.name) {\n                case 'default':\n                  s = t.importDefaultSpecifier(identifier);\n                  break;\n                case '*':\n                  s = t.importNamespaceSpecifier(identifier);\n                  break;\n                default:\n                  s = t.importSpecifier(identifier, t.identifier(mapping.name));\n              }\n\n              declarations.push(\n                t.importDeclaration([s], t.stringLiteral(alias))\n              );\n            } else {\n              const previous = declarations.find(\n                d => d.source.value === path.node.source.value\n              );\n\n              if (previous) {\n                previous.specifiers.push(specifier);\n              } else {\n                const node = t.importDeclaration([specifier], path.node.source);\n                node[SKIP] = true;\n                declarations.push(node);\n              }\n            }\n\n            return declarations;\n          }, [])\n        );\n\n        path.requeue();\n      },\n    },\n  };\n};\n"]}
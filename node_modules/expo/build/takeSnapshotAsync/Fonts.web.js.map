{"version":3,"file":"Fonts.web.js","sourceRoot":"","sources":["../../src/takeSnapshotAsync/Fonts.web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,2BAA2B,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAIlF,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAAC,OAAoB;IAClE,MAAM,aAAa,GAAG,MAAM,4BAA4B,EAAE,CAAC;IAC3D,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAClD,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IAC/B,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzE,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,KAAK,UAAU,4BAA4B;IACzC,MAAM,WAAW,GAAmB,QAAQ,CAAC,WAAW,CAAC;IACzD,MAAM,MAAM,GAAU,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9C,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IACrC,MAAM,cAAc,GAAG,QAAQ;SAC5B,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC,cAAc,CAAC;SACrD,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEvE,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACtF,CAAC;AAED,KAAK,UAAU,uBAAuB,CAAC,EACrC,gBAAgB,EAChB,OAAO,GACM;IACb,IAAI,UAAU,CAAC;IACf,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,IAAI,IAAI,IAAI,EAAE;QACrD,UAAU,GAAG,gBAAgB,CAAC,IAAI,CAAC;KACpC;IACD,OAAO,MAAM,2BAA2B,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;AAChE,CAAC;AAED,SAAS,WAAW,CAAC,WAA4B;IAC/C,MAAM,QAAQ,GAAmB,EAAE,CAAC;IACpC,KAAK,MAAM,KAAK,IAAI,WAAW,EAAE;QAC/B,IAAI;YACF,MAAM,KAAK,GAAU,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAChD,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;SACzB;QAAC,OAAO,EAAE,OAAO,EAAE,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,sCAAsC,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC,CAAC;SACjF;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { batchProcessAllSourcesAsync, shouldProcess } from './ProcessSources.web';\n\ndeclare var document: Document;\n\nexport async function batchResolveAllFontsAsync(element: HTMLElement): Promise<HTMLElement> {\n  const fontCSSStyles = await findAllFontsForDocumentAsync();\n  const styleNode = document.createElement('style');\n  element.appendChild(styleNode);\n  styleNode.appendChild(document.createTextNode(fontCSSStyles.join('\\n')));\n  return element;\n}\n\nasync function findAllFontsForDocumentAsync(): Promise<string[]> {\n  const styleSheets: StyleSheetList = document.styleSheets;\n  const sheets: any[] = Array.from(styleSheets);\n  const cssRules = getCSSRules(sheets);\n  const rulesToProcess = cssRules\n    .filter(({ type }) => type === CSSRule.FONT_FACE_RULE)\n    .filter(({ style }) => shouldProcess(style.getPropertyValue('src')));\n\n  return await Promise.all(rulesToProcess.map(item => createNewFontForCSSRule(item)));\n}\n\nasync function createNewFontForCSSRule({\n  parentStyleSheet,\n  cssText,\n}: CSSStyleRule): Promise<string> {\n  let initialURL;\n  if (parentStyleSheet && parentStyleSheet.href != null) {\n    initialURL = parentStyleSheet.href;\n  }\n  return await batchProcessAllSourcesAsync(cssText, initialURL);\n}\n\nfunction getCSSRules(styleSheets: CSSStyleSheet[]): CSSStyleRule[] {\n  const cssRules: CSSStyleRule[] = [];\n  for (const sheet of styleSheets) {\n    try {\n      const rules: any[] = Array.from(sheet.cssRules);\n      cssRules.push(...rules);\n    } catch ({ message }) {\n      throw new Error(`Error while reading CSS rules from ${sheet.href}: ${message}`);\n    }\n  }\n  return cssRules;\n}\n"]}
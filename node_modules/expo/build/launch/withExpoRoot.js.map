{"version":3,"file":"withExpoRoot.js","sourceRoot":"","sources":["../../src/launch/withExpoRoot.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,aAAa,MAAM,qBAAqB,CAAC;AACrD,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAClC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,OAAO,aAAa,MAAM,gCAAgC,CAAC;AAC3D,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AAGpD,MAAM,CAAC,OAAO,UAAU,YAAY,CAClC,gBAAwC;IAExC,OAAO,SAAS,QAAQ,CAAC,KAAQ;QAC/B,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;YAC1B,IAAI,UAAU,CAAC,6BAA6B,EAAE;gBAC5C,UAAU,CAAC,6BAA6B,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;aAChF;YAED,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;YACtB,IAAI,GAAG,CAAC,YAAY,EAAE;gBACpB,aAAa,CAAC,uBAAuB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;aACzD;YAED,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;SAC9B;QAED,MAAM,aAAa,GAAG;YACpB,GAAG,KAAK;YACR,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,CAAC,cAAc,EAAE;SACnE,CAAC;QACF,IAAI,OAAO,EAAE;YACX,OAAO,CACL,CAAC,iBAAiB,CAChB;UAAA,CAAC,gBAAgB,CAAC,IAAI,aAAa,CAAC,EACtC;QAAA,EAAE,iBAAiB,CAAC,CACrB,CAAC;SACH;aAAM;YACL,OAAO,CAAC,gBAAgB,CAAC,IAAI,aAAa,CAAC,EAAG,CAAC;SAChD;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import * as ErrorRecovery from 'expo-error-recovery';\nimport * as Font from 'expo-font';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport Notifications from '../Notifications/Notifications';\nimport RootErrorBoundary from './RootErrorBoundary';\nimport { InitialProps } from './withExpoRoot.types';\n\nexport default function withExpoRoot<P extends InitialProps>(\n  AppRootComponent: React.ComponentType<P>\n): React.ComponentType<P> {\n  return function ExpoRoot(props: P) {\n    const didInitialize = React.useRef(false);\n    if (!didInitialize.current) {\n      if (StyleSheet.setStyleAttributePreprocessor) {\n        StyleSheet.setStyleAttributePreprocessor('fontFamily', Font.processFontFamily);\n      }\n\n      const { exp } = props;\n      if (exp.notification) {\n        Notifications._setInitialNotification(exp.notification);\n      }\n\n      didInitialize.current = true;\n    }\n\n    const combinedProps = {\n      ...props,\n      exp: { ...props.exp, errorRecovery: ErrorRecovery.recoveredProps },\n    };\n    if (__DEV__) {\n      return (\n        <RootErrorBoundary>\n          <AppRootComponent {...combinedProps} />\n        </RootErrorBoundary>\n      );\n    } else {\n      return <AppRootComponent {...combinedProps} />;\n    }\n  };\n}\n"]}
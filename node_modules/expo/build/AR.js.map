{"version":3,"file":"AR.js","sourceRoot":"","sources":["../src/AR.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAEvC,OAAO,EACL,UAAU,EACV,kBAAkB,EAClB,aAAa,EACb,QAAQ,EAER,cAAc,GACf,MAAM,cAAc,CAAC;AAEtB,MAAM,UAAU,GAAG,aAAa,CAAC,UAAU,IAAI,EAAE,CAAC;AAElD,MAAM,OAAO,GAAG,IAAI,kBAAkB,CAAC,UAAU,CAAC,CAAC;AAEnD;;;;GAIG;AACH,MAAM,CAAN,IAAY,qBAgBX;AAhBD,WAAY,qBAAqB;IAC/B;;;OAGG;IACH,+DAAsC,CAAA;IACtC;;;OAGG;IACH,2EAAkD,CAAA;IAClD;;;OAGG;IACH,6DAAoC,CAAA;AACtC,CAAC,EAhBW,qBAAqB,KAArB,qBAAqB,QAgBhC;AAED,MAAM,CAAN,IAAY,gBAGX;AAHD,WAAY,gBAAgB;IAC1B,iDAA6B,CAAA;IAC7B,mDAA+B,CAAA;AACjC,CAAC,EAHW,gBAAgB,KAAhB,gBAAgB,QAG3B;AAED,MAAM,CAAN,IAAY,iBAGX;AAHD,WAAY,iBAAiB;IAC3B,6DAAwC,CAAA;IACxC,6DAAwC,CAAA;AAC1C,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,QAG5B;AAyJD,MAAM,CAAN,IAAY,UAoDX;AApDD,WAAY,UAAU;IACpB,sCAAwB,CAAA;IACxB,sCAAwB,CAAA;IACxB,yCAA2B,CAAA;IAC3B,4CAA8B,CAAA;IAC9B,4CAA8B,CAAA;IAC9B,qCAAuB,CAAA;IACvB,4CAA8B,CAAA;IAC9B,4CAA8B,CAAA;IAC9B,sCAAwB,CAAA;IACxB,sCAAwB,CAAA;IACxB,4CAA8B,CAAA;IAC9B,4CAA8B,CAAA;IAC9B,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;IAC1B,0CAA4B,CAAA;IAC5B,0CAA4B,CAAA;IAC5B,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;IAC1B,oCAAsB,CAAA;IACtB,oCAAsB,CAAA;IACtB,uCAAyB,CAAA;IACzB,iCAAmB,CAAA;IACnB,iCAAmB,CAAA;IACnB,mCAAqB,CAAA;IACrB,uCAAyB,CAAA;IACzB,4CAA8B,CAAA;IAC9B,4CAA8B,CAAA;IAC9B,0CAA4B,CAAA;IAC5B,0CAA4B,CAAA;IAC5B,yCAA2B,CAAA;IAC3B,qCAAuB,CAAA;IACvB,kDAAoC,CAAA;IACpC,kDAAoC,CAAA;IACpC,0CAA4B,CAAA;IAC5B,0CAA4B,CAAA;IAC5B,yCAA2B,CAAA;IAC3B,uCAAyB,CAAA;IACzB,+CAAiC,CAAA;IACjC,+CAAiC,CAAA;IACjC,iDAAmC,CAAA;IACnC,iDAAmC,CAAA;IACnC,0CAA4B,CAAA;IAC5B,0CAA4B,CAAA;IAC5B,8CAAgC,CAAA;IAChC,8CAAgC,CAAA;IAChC,8CAAgC,CAAA;IAChC,8CAAgC,CAAA;IAChC,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;AAC5B,CAAC,EApDW,UAAU,KAAV,UAAU,QAoDrB;AAED,MAAM,CAAN,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,uCAAqB,CAAA;IACrB,6CAA2B,CAAA;AAC7B,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,cAaX;AAbD,WAAY,cAAc;IACxB;;OAEG;IACH,+BAAa,CAAA;IACb;;OAEG;IACH,2CAAyB,CAAA;IACzB;;OAEG;IACH,uCAAqB,CAAA;AACvB,CAAC,EAbW,cAAc,KAAd,cAAc,QAazB;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,kBA2BX;AA3BD,WAAY,kBAAkB;IAC5B;;OAEG;IACH,mDAA6B,CAAA;IAC7B;;OAEG;IACH,yDAAmC,CAAA;IACnC;;OAEG;IACH,qDAA+B,CAAA;IAC/B;;OAEG;IACH,qDAA+B,CAAA;IAC/B;;;OAGG;IACH,2EAAqD,CAAA;IACrD;;;OAGG;IACH,+EAAyD,CAAA;AAC3D,CAAC,EA3BW,kBAAkB,KAAlB,kBAAkB,QA2B7B;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,cAcX;AAdD,WAAY,cAAc;IACxB;;OAEG;IACH,qCAAmB,CAAA;IACnB;;;OAGG;IACH,yDAAuC,CAAA;IACvC;;OAEG;IACH,qDAAmC,CAAA;AACrC,CAAC,EAdW,cAAc,KAAd,cAAc,QAczB;AAED,MAAM,CAAN,IAAY,SAOX;AAPD,WAAY,SAAS;IACnB,wCAAiB,UAAU,CAAC,cAAc,oBAAA,CAAA;IAC1C,0CAAmB,UAAU,CAAC,gBAAgB,sBAAA,CAAA;IAC9C,0CAAmB,UAAU,CAAC,gBAAgB,sBAAA,CAAA;IAC9C,sDAA+B,UAAU,CAAC,4BAA4B,kCAAA,CAAA;IACtE,+CAAwB,UAAU,CAAC,qBAAqB,2BAAA,CAAA;IACxD,kDAA2B,UAAU,CAAC,wBAAwB,8BAAA,CAAA;AAChE,CAAC,EAPW,SAAS,KAAT,SAAS,QAOpB;AAED,MAAM,CAAN,IAAY,UAKX;AALD,WAAY,UAAU;IACpB,mCAAqB,CAAA;IACrB,qCAAuB,CAAA;IACvB,qCAAuB,CAAA;IACvB,iCAAmB,CAAA;AACrB,CAAC,EALW,UAAU,KAAV,UAAU,QAKrB;AAED,MAAM,CAAN,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,8BAAW,CAAA;IACX,oCAAiB,CAAA;IACjB,oCAAiB,CAAA;AACnB,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;AAED,MAAM,CAAN,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,qCAAmB,CAAA;IACnB,uDAAqC,CAAA;IACrC,qDAAmC,CAAA;IACnC,yDAAuC,CAAA;AACzC,CAAC,EALW,cAAc,KAAd,cAAc,QAKzB;AAED,MAAM,CAAN,IAAY,aAOX;AAPD,WAAY,aAAa;IACvB,iCAAiC;IACjC,6DAA4C,CAAA;IAC5C,4DAA4D;IAC5D,mDAAkC,CAAA;IAClC,0BAA0B;IAC1B,iDAAgC,CAAA;AAClC,CAAC,EAPW,aAAa,KAAb,aAAa,QAOxB;AAED,MAAM,CAAN,IAAY,mBAeX;AAfD,WAAY,mBAAmB;IAC7B,+BAA+B;IAC/B,yDAAkC,CAAA;IAElC,6DAA6D;IAC7D,yEAAkD,CAAA;IAElD,mEAAmE;IACnE,+EAAwD,CAAA;IAExD,2EAA2E;IAC3E,yFAAkE,CAAA;IAElE,+DAA+D;IAC/D,yEAAkD,CAAA;AACpD,CAAC,EAfW,mBAAmB,KAAnB,mBAAmB,QAe9B;AAoBD,MAAM,UAAU,UAAU;IACxB,OAAO,UAAU,CAAC,YAAY,CAAC;AACjC,CAAC;AAED,MAAM,yBAAyB,GAAG;IAChC,SAAS,EAAE,gCAAgC;IAC3C,SAAS,EAAE,8EAA8E;IACzF,cAAc,EAAE,gDAAgD;CACjE,CAAC;AAEF,MAAM,UAAU,WAAW;IACzB,qBAAqB;IACrB,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,IAAI,SAAS,CAAC,eAAe,GAAG,IAAI,CAAC;IAEhF,IACE,CAAC,SAAS,CAAC,QAAQ,IAAI,qBAAqB;QAC5C,aAAa;QACb,QAAQ,CAAC,MAAM;QACf,QAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,gBAAgB;QACzC,CAAC,SAAS;QACV,CAAC,UAAU,CAAC,WAAW,IAAI,iCAAiC;QAC5D,CAAC,UAAU,CAAC,UAAU,CAAC,8DAA8D;MACrF;QACA,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,uBAAuB;IACrC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;QACvB,OAAO,yBAAyB,CAAC,SAAS,CAAC;KAC5C;SAAM,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QAChC,OAAO,GAAG,yBAAyB,CAAC,cAAc,IAAI,QAAQ,CAAC,EAAE,SAAS,CAAC;KAC5E;SAAM,IAAI,SAAS,CAAC,eAAe,IAAI,IAAI,IAAI,SAAS,CAAC,eAAe,GAAG,IAAI,EAAE;QAChF,OAAO,GAAG,yBAAyB,CAAC,SAAS,IAAI,SAAS,CAAC,eAAe,SAAS,CAAC;KACrF;IACD,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,QAA8C;IAE9C,OAAO,YAAY,CAAC,SAAS,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;AAC1D,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,QAAgD;IAEhD,OAAO,YAAY,CAAC,SAAS,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,QAAgD;IAEhD,OAAO,YAAY,CAAC,SAAS,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,UAAU,8BAA8B,CAC5C,QAA4D;IAE5D,OAAO,YAAY,CAAC,SAAS,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;AACxE,CAAC;AAED,MAAM,UAAU,uBAAuB,CACrC,QAAqD;IAErD,OAAO,YAAY,CAAC,SAAS,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;AACjE,CAAC;AAED,MAAM,UAAU,0BAA0B,CACxC,QAAwD;IAExD,OAAO,YAAY,CAAC,SAAS,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;AACpE,CAAC;AAED,SAAS,YAAY,CAAC,SAAoB,EAAE,KAA+B;IACzE,OAAO,OAAO,CAAC,WAAW,CAAC,SAAgB,EAAE,KAAK,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,SAAqB;IACtD,OAAO,CAAC,kBAAkB,CAAC,SAAgB,CAAC,CAAC;AAC/C,CAAC;AAED,4DAA4D;AAC5D,MAAM,UAAU,cAAc,CAAC,KAAc,EAAE,KAAyB;IACtE,IAAI,UAAU,CAAC,cAAc,EAAE;QAC7B,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KAChD;IACD,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;AACpE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,MAE7C;IACC,IAAI,UAAU,CAAC,uBAAuB,EAAE;QACtC,MAAM,UAAU,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;KAClD;AACH,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,UAA2B;IACzD,IAAI,UAAU,CAAC,eAAe,EAAE;QAC9B,OAAO,UAAU,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;KAC/C;IACD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;AACxD,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,IAAY,EAAE,GAAW;IACrD,IAAI,UAAU,CAAC,aAAa,EAAE;QAC5B,OAAO,UAAU,CAAC,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KAC5C;IACD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;AACxD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,SAAS;IAC7B,IAAI,UAAU,CAAC,SAAS,EAAE;QACxB,MAAM,UAAU,CAAC,SAAS,EAAE,CAAC;KAC9B;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,UAAU,CAC9B,IAA6C,EAC7C,aAAoC;IAEpC,IAAI,MAAM,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACpE,IAAI,UAAU,CAAC,UAAU,EAAE;QACzB,OAAO,MAAM,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;KAC3D;IACD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;AACxD,CAAC;AAED,SAAS,cAAc,CAAC,SAA0B;IAChD,IAAI,MAAM,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;IACvC,IAAI,MAAM,KAAK,IAAI,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,8DAA8D,SAAS,EAAE,CAAC,CAAC;KAC5F;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,KAAK;IACnB,IAAI,UAAU,CAAC,KAAK,EAAE;QACpB,UAAU,CAAC,KAAK,EAAE,CAAC;KACpB;AACH,CAAC;AAED,MAAM,UAAU,MAAM;IACpB,IAAI,UAAU,CAAC,MAAM,EAAE;QACrB,UAAU,CAAC,MAAM,EAAE,CAAC;KACrB;AACH,CAAC;AAED,MAAM,UAAU,KAAK;IACnB,IAAI,UAAU,CAAC,KAAK,EAAE;QACpB,UAAU,CAAC,KAAK,EAAE,CAAC;KACpB;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,aAAoC;IAC9E,IAAI,UAAU,CAAC,qBAAqB,EAAE;QACpC,MAAM,UAAU,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;KACvD;AACH,CAAC;AAED,MAAM,UAAU,oBAAoB;IAClC,IAAI,UAAU,CAAC,oBAAoB,EAAE;QACnC,OAAO,UAAU,CAAC,oBAAoB,EAAE,CAAC;KAC1C;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,iBAA0B;IAC7D,IAAI,UAAU,CAAC,oBAAoB,EAAE;QACnC,UAAU,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;KACpD;AACH,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,cAA8B;IAC9D,IAAI,UAAU,CAAC,iBAAiB,EAAE;QAChC,UAAU,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;KAC9C;AACH,CAAC;AAED,MAAM,UAAU,iBAAiB;IAC/B,IAAI,UAAU,CAAC,iBAAiB,EAAE;QAChC,OAAO,UAAU,CAAC,iBAAiB,EAAE,CAAC;KACvC;IACD,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;AACxE,CAAC;AAED,MAAM,UAAU,gBAAgB;IAC9B,IAAI,UAAU,CAAC,gBAAgB,EAAE;QAC/B,OAAO,UAAU,CAAC,gBAAgB,EAAE,CAAC;KACtC;IACD,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;AACzE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,eAAuB;IAC/D,IAAI,UAAU,CAAC,mBAAmB,EAAE;QAClC,MAAM,UAAU,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;KACvD;AACH,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,wBAAiC;IACzE,IAAI,UAAU,CAAC,yBAAyB,EAAE;QACxC,UAAU,CAAC,yBAAyB,CAAC,wBAAwB,CAAC,CAAC;KAChE;AACH,CAAC;AAED,MAAM,UAAU,yBAAyB;IACvC,IAAI,UAAU,CAAC,yBAAyB,EAAE;QACxC,OAAO,UAAU,CAAC,yBAAyB,EAAE,CAAC;KAC/C;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,kBAA2B;IAC7D,IAAI,UAAU,CAAC,mBAAmB,EAAE;QAClC,UAAU,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC;KACpD;AACH,CAAC;AAED,MAAM,UAAU,mBAAmB;IACjC,IAAI,UAAU,CAAC,mBAAmB,EAAE;QAClC,OAAO,UAAU,CAAC,mBAAmB,EAAE,CAAC;KACzC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,cAA8B;IAC9D,IAAI,UAAU,CAAC,iBAAiB,EAAE;QAChC,UAAU,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;KAC9C;AACH,CAAC;AAED,MAAM,UAAU,iBAAiB;IAC/B,IAAI,UAAU,CAAC,iBAAiB,EAAE;QAChC,OAAO,UAAU,CAAC,iBAAiB,EAAE,CAAC;KACvC;IACD,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;AACxE,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,aAAoC;IAC3E,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACnD,0DAA0D;IAC1D,MAAM,GAAG,GAAG,CAAC,KAAK,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;IACrF,IAAI,aAAa,KAAK,qBAAqB,CAAC,IAAI,IAAI,GAAG,IAAI,WAAW,EAAE,EAAE;QACxE,OAAO,IAAI,CAAC;KACb;IACD,OAAO,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;AACrC,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,aAAoC;IAC3E,MAAM,YAAY,GAAG;QACnB,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAAE,2BAA2B;QAC1D,CAAC,qBAAqB,CAAC,WAAW,CAAC,EAAE,iCAAiC;QACtE,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,0BAA0B;KACzD,CAAC;IACF,MAAM,WAAW,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;IAChD,OAAO,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,sBAAsB;IACpC,OAAO,wBAAwB,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,UAAU,qBAAqB;IACnC,OAAO,wBAAwB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;AAC/D,CAAC;AAED,sBAAsB;AAEtB;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,cAAc,CAAC;AAClD;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,cAAc,CAAC;AAClD;;;GAGG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,SAAS,CAAC;AACpC;;;GAGG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,UAAU,CAAC;AACtC;;;GAGG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,eAAe,CAAC;AAChD;;;GAGG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,cAAc,CAAC;AAC9C;;;GAGG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,aAAa,CAAC;AAC5C;;;GAGG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,mBAAmB,CAAC;AACxD;;;GAGG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,qBAAqB,CAAC","sourcesContent":["import Constants from 'expo-constants';\nimport * as React from 'react';\nimport {\n  Dimensions,\n  NativeEventEmitter,\n  NativeModules,\n  Platform,\n  EmitterSubscription,\n  findNodeHandle,\n} from 'react-native';\n\nconst ExponentAR = NativeModules.ExponentAR || {};\n\nconst emitter = new NativeEventEmitter(ExponentAR);\n\n/**\n * Tracking Configuration\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arconfiguration\n */\nexport enum TrackingConfiguration {\n  /**\n   * Provides high-quality AR experiences that use the rear-facing camera precisely track a device's\n   * position and orientation and allow plane detection and hit testing.\n   */\n  World = 'ARWorldTrackingConfiguration',\n  /**\n   * Provides basic AR experiences that use the rear-facing camera and track only a device's\n   * orientation.\n   */\n  Orientation = 'AROrientationTrackingConfiguration',\n  /**\n   * Provides AR experiences that use the front-facing camera and track the movement and expressions\n   * of the user's face.\n   */\n  Face = 'ARFaceTrackingConfiguration',\n}\n\nexport enum DepthDataQuality {\n  Low = 'AVDepthDataQualityLow',\n  High = 'AVDepthDataQualityHigh',\n}\n\nexport enum DepthDataAccuracy {\n  Absolute = 'AVDepthDataAccuracyAbsolute',\n  Relative = 'AVDepthDataAccuracyRelative',\n}\n\nexport type Size = {\n  width: number;\n  height: number;\n};\n\nexport type Vector3 = {\n  x: number;\n  y: number;\n  z: number;\n};\n\nexport type Vector2 = {\n  x: number;\n  y: number;\n};\n\nexport type TextureCoordinate = {\n  u: number;\n  v: number;\n};\n\nexport type Matrix = number[];\n\nexport type FaceGeometry = {\n  vertexCount: number;\n  textureCoordinateCount: number;\n  triangleCount: number;\n  vertices: Vector3[];\n  textureCoordinates: TextureCoordinate[];\n  triangleIndices: number[];\n};\n\nexport type BaseAnchor = {\n  type: AnchorType;\n  transform: Matrix;\n  id: string;\n};\n\nexport type PlaneAnchor = BaseAnchor & {\n  type: AnchorType.Plane;\n  center: Vector3;\n  extent: { width: number; length: number };\n};\n\nexport type ImageAnchor = BaseAnchor & {\n  type: AnchorType.Image;\n  image?: {\n    name: string | null;\n    size: Size;\n  };\n};\n\nexport type FaceAnchor = BaseAnchor & {\n  type: AnchorType.Face;\n  isTracked: boolean;\n  geometry?: FaceGeometry;\n  blendShapes?: { [shape in BlendShape]?: number };\n};\n\nexport type Anchor = BaseAnchor | PlaneAnchor | ImageAnchor | FaceAnchor;\n\nexport type HitTest = {\n  type: number;\n  distance: number;\n  localTransform: number[];\n  worldTransform: number[];\n  anchor: Anchor;\n};\n\nexport type HitTestResults = {\n  hitTest: HitTest[];\n};\n\nexport type DetectionImage = {\n  uri: string;\n  width: number;\n  name?: string;\n};\n\nexport type ARFrameAnchorRequest = {\n  ARFaceTrackingConfiguration?: {\n    geometry?: boolean;\n    blendShapes?: boolean | BlendShape[];\n  };\n};\n\nexport type ARFrameRequest = {\n  anchors?: ARFrameAnchorRequest;\n  rawFeaturePoints?: boolean;\n  lightEstimation?: boolean;\n  capturedDepthData?: boolean;\n};\n\nexport type LightEstimation = {\n  ambientIntensity: number;\n  ambientColorTemperature: number;\n  primaryLightDirection?: Vector3;\n  primaryLightIntensity?: number;\n};\n\nexport type RawFeaturePoint = { x: number; y: number; z: number; id: string };\n\nexport type CameraCalibrationData = {\n  intrinsicMatrix: Matrix;\n  intrinsicMatrixReferenceDimensions: Size;\n  extrinsicMatrix: Matrix;\n  pixelSize: number;\n  lensDistortionLookupTable: any;\n  inverseLensDistortionLookupTable: any;\n  lensDistortionCenter: Vector3;\n};\n\nexport type CapturedDepthData = {\n  timestamp: number;\n  depthDataQuality: DepthDataQuality;\n  depthDataAccuracy: DepthDataAccuracy;\n  depthDataFiltered: boolean;\n  cameraCalibrationData: CameraCalibrationData;\n};\n\nexport type ARFrame = {\n  timestamp: number;\n  anchors?: Anchor[] | null;\n  rawFeaturePoints?: RawFeaturePoint[] | null;\n  lightEstimation?: LightEstimation | null;\n  capturedDepthData?: CapturedDepthData | null;\n};\n\nexport type ARMatrices = {\n  transform: Matrix;\n  viewMatrix: Matrix;\n  projectionMatrix: Matrix;\n};\n\ntype ARStartResult = {\n  capturedImageTexture: number;\n};\n\ntype ReactNativeNodeHandle = number;\n\nexport type ImageResolution = {\n  width: number;\n  height: number;\n};\n\nexport type VideoFormat = {\n  type: string;\n  imageResolution: ImageResolution;\n  framesPerSecond: number;\n};\n\nexport enum BlendShape {\n  BrowDownL = 'browDown_L',\n  BrowDownR = 'browDown_R',\n  BrowInnerUp = 'browInnerUp',\n  BrowOuterUpL = 'browOuterUp_L',\n  BrowOuterUpR = 'browOuterUp_R',\n  CheekPuff = 'cheekPuff',\n  CheekSquintL = 'cheekSquint_L',\n  CheekSquintR = 'cheekSquint_R',\n  EyeBlinkL = 'eyeBlink_L',\n  EyeBlinkR = 'eyeBlink_R',\n  EyeLookDownL = 'eyeLookDown_L',\n  EyeLookDownR = 'eyeLookDown_R',\n  EyeLookInL = 'eyeLookIn_L',\n  EyeLookInR = 'eyeLookIn_R',\n  EyeLookOutL = 'eyeLookOut_L',\n  EyeLookOutR = 'eyeLookOut_R',\n  EyeLookUpL = 'eyeLookUp_L',\n  EyeLookUpR = 'eyeLookUp_R',\n  EyeSquintL = 'eyeSquint_L',\n  EyeSquintR = 'eyeSquint_R',\n  EyeWideL = 'eyeWide_L',\n  EyeWideR = 'eyeWide_R',\n  JawForward = 'jawForward',\n  JawLeft = 'jawLeft',\n  JawOpen = 'jawOpen',\n  JawRight = 'jawRight',\n  MouthClose = 'mouthClose',\n  MouthDimpleL = 'mouthDimple_L',\n  MouthDimpleR = 'mouthDimple_R',\n  MouthFrownL = 'mouthFrown_L',\n  MouthFrownR = 'mouthFrown_R',\n  MouthFunnel = 'mouthFunnel',\n  MouthLeft = 'mouthLeft',\n  MouthLowerDownL = 'mouthLowerDown_L',\n  MouthLowerDownR = 'mouthLowerDown_R',\n  MouthPressL = 'mouthPress_L',\n  MouthPressR = 'mouthPress_R',\n  MouthPucker = 'mouthPucker',\n  MouthRight = 'mouthRight',\n  MouthRollLower = 'mouthRollLower',\n  MouthRollUpper = 'mouthRollUpper',\n  MouthShrugLower = 'mouthShrugLower',\n  MouthShrugUpper = 'mouthShrugUpper',\n  MouthSmileL = 'mouthSmile_L',\n  MouthSmileR = 'mouthSmile_R',\n  MouthStretchL = 'mouthStretch_L',\n  MouthStretchR = 'mouthStretch_R',\n  MouthUpperUpL = 'mouthUpperUp_L',\n  MouthUpperUpR = 'mouthUpperUp_R',\n  NoseSneerL = 'noseSneer_L',\n  NoseSneerR = 'noseSneer_R',\n}\n\nexport enum FaceAnchorProp {\n  Geometry = 'geometry',\n  BlendShapes = 'blendShapes',\n}\n\n/**\n * Plane Detection\n * Options for whether and how ARKit detects flat surfaces in captured images.\n * https://developer.apple.com/documentation/arkit/arplanedetection\n */\nexport enum PlaneDetection {\n  /**\n   * No plane detection is run\n   */\n  None = 'none',\n  /**\n   * Plane detection determines horizontal planes in the scene\n   */\n  Horizontal = 'horizontal',\n  /**\n   * Plane detection determines vertical planes in the scene\n   */\n  Vertical = 'vertical',\n}\n\n/**\n * Hit-Test Result Types\n * Possible types for specifying a hit-test search, or for the result of a hit-test search.\n * https://developer.apple.com/documentation/arkit/arhittestresulttype\n */\nexport enum HitTestResultTypes {\n  /**\n   * Result type from intersecting the nearest feature point.\n   */\n  FeaturePoint = 'featurePoint',\n  /**\n   * Result type from intersecting a horizontal plane estimate, determined for the current frame.\n   */\n  HorizontalPlane = 'horizontalPlane',\n  /**\n   * Result type from intersecting a vertical plane estimate, determined for the current frame.\n   */\n  VerticalPlane = 'verticalPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor.\n   */\n  ExistingPlane = 'existingPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * extent.\n   */\n  ExistingPlaneUsingExtent = 'existingPlaneUsingExtent',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * geometry.\n   */\n  ExistingPlaneUsingGeometry = 'existingPlaneUsingGeometry',\n}\n\n/**\n * World Alignment\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arworldalignment\n */\nexport enum WorldAlignment {\n  /**\n   * Aligns the world with gravity that is defined by vector (0, -1, 0).\n   */\n  Gravity = 'gravity',\n  /**\n   * Aligns the world with gravity that is defined by the vector (0, -1, 0) and heading (w.r.t. true\n   * north) that is given by the vector (0, 0, -1).\n   */\n  GravityAndHeading = 'gravityAndHeading',\n  /**\n   * Aligns the world with the camera’s orientation.\n   */\n  AlignmentCamera = 'alignmentCamera',\n}\n\nexport enum EventType {\n  FrameDidUpdate = ExponentAR.frameDidUpdate,\n  DidFailWithError = ExponentAR.didFailWithError,\n  AnchorsDidUpdate = ExponentAR.anchorsDidUpdate,\n  CameraDidChangeTrackingState = ExponentAR.cameraDidChangeTrackingState,\n  SessionWasInterrupted = ExponentAR.sessionWasInterrupted,\n  SessionInterruptionEnded = ExponentAR.sessionInterruptionEnded,\n}\n\nexport enum AnchorType {\n  Face = 'ARFaceAnchor',\n  Image = 'ARImageAnchor',\n  Plane = 'ARPlaneAnchor',\n  Anchor = 'ARAnchor',\n}\n\nexport enum AnchorEventType {\n  Add = 'add',\n  Update = 'update',\n  Remove = 'remove',\n}\n\nexport enum FrameAttribute {\n  Anchors = 'anchors',\n  RawFeaturePoints = 'rawFeaturePoints',\n  LightEstimation = 'lightEstimation',\n  CapturedDepthData = 'capturedDepthData',\n}\n\nexport enum TrackingState {\n  /** Tracking is not available. */\n  NotAvailable = 'ARTrackingStateNotAvailable',\n  /** Tracking is limited. See tracking reason for details. */\n  Limited = 'ARTrackingStateLimited',\n  /** Tracking is Normal. */\n  Normal = 'ARTrackingStateNormal',\n}\n\nexport enum TrackingStateReason {\n  /** Tracking is not limited. */\n  None = 'ARTrackingStateReasonNone',\n\n  /** Tracking is limited due to initialization in progress. */\n  Initializing = 'ARTrackingStateReasonInitializing',\n\n  /** Tracking is limited due to a excessive motion of the camera. */\n  ExcessiveMotion = 'ARTrackingStateReasonExcessiveMotion',\n\n  /** Tracking is limited due to a lack of features visible to the camera. */\n  InsufficientFeatures = 'ARTrackingStateReasonInsufficientFeatures',\n\n  /** Tracking is limited due to a relocalization in progress. */\n  Relocalizing = 'ARTrackingStateReasonRelocalizing',\n}\n\ntype FrameDidUpdateEvent = {};\n\ntype DidFailWithErrorEvent = { error: Error };\n\ntype AnchorsDidUpdateEvent = {\n  eventType: AnchorEventType;\n  anchors: Anchor[];\n};\n\ntype CameraDidChangeTrackingStateEvent = {\n  trackingState: TrackingState;\n  trackingStateReason: TrackingStateReason;\n};\n\ntype SessionWasInterruptedEvent = {};\n\ntype SessionInterruptionEndedEvent = {};\n\nexport function getVersion(): string {\n  return ExponentAR.ARKitVersion;\n}\n\nconst AvailabilityErrorMessages = {\n  Simulator: `Cannot run EXGL in a simulator`,\n  ANineChip: `ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a`,\n  ARKitOnlyOnIOS: `ARKit can only run on an iOS device! This is a`,\n};\n\nexport function isAvailable(): boolean {\n  // Device has A9 chip\n  const hasA9Chip = Constants.deviceYearClass && Constants.deviceYearClass > 2014;\n\n  if (\n    !Constants.isDevice || // Prevent Simulators\n    // @ts-ignore\n    Platform.isTVOS ||\n    Platform.OS !== 'ios' || // Device is iOS\n    !hasA9Chip ||\n    !ExponentAR.isSupported || // ARKit is included in the build\n    !ExponentAR.startAsync // Older SDK versions (27 and lower) that are fully compatible\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function getUnavailabilityReason(): string {\n  if (!Constants.isDevice) {\n    return AvailabilityErrorMessages.Simulator;\n  } else if (Platform.OS !== 'ios') {\n    return `${AvailabilityErrorMessages.ARKitOnlyOnIOS} ${Platform.OS} device`;\n  } else if (Constants.deviceYearClass == null || Constants.deviceYearClass < 2015) {\n    return `${AvailabilityErrorMessages.ANineChip} ${Constants.deviceYearClass} device`;\n  }\n  return 'Unknown Reason';\n}\n\nexport function onFrameDidUpdate(\n  listener: (event: FrameDidUpdateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.FrameDidUpdate, listener);\n}\n\nexport function onDidFailWithError(\n  listener: (event: DidFailWithErrorEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.DidFailWithError, listener);\n}\n\nexport function onAnchorsDidUpdate(\n  listener: (event: AnchorsDidUpdateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.AnchorsDidUpdate, listener);\n}\n\nexport function onCameraDidChangeTrackingState(\n  listener: (event: CameraDidChangeTrackingStateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.CameraDidChangeTrackingState, listener);\n}\n\nexport function onSessionWasInterrupted(\n  listener: (event: SessionWasInterruptedEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionWasInterrupted, listener);\n}\n\nexport function onSessionInterruptionEnded(\n  listener: (event: SessionInterruptionEndedEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionInterruptionEnded, listener);\n}\n\nfunction _addListener(eventType: EventType, event: (...args: any[]) => void): EmitterSubscription {\n  return emitter.addListener(eventType as any, event);\n}\n\nexport function removeAllListeners(eventType?: EventType): void {\n  emitter.removeAllListeners(eventType as any);\n}\n\n// TODO: support multiple types (take an array or bit flags)\nexport function performHitTest(point: Vector2, types: HitTestResultTypes): HitTestResults {\n  if (ExponentAR.performHitTest) {\n    return ExponentAR.performHitTest(point, types);\n  }\n  throw new Error(`AR hit testing is not supported on this device`);\n}\n\nexport async function setDetectionImagesAsync(images: {\n  [name: string]: DetectionImage;\n}): Promise<void> {\n  if (ExponentAR.setDetectionImagesAsync) {\n    await ExponentAR.setDetectionImagesAsync(images);\n  }\n}\n\nexport function getCurrentFrame(attributes?: ARFrameRequest): ARFrame {\n  if (ExponentAR.getCurrentFrame) {\n    return ExponentAR.getCurrentFrame(attributes);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nexport function getARMatrices(near: number, far: number): ARMatrices {\n  if (ExponentAR.getARMatrices) {\n    return ExponentAR.getARMatrices(near, far);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nexport async function stopAsync(): Promise<void> {\n  if (ExponentAR.stopAsync) {\n    await ExponentAR.stopAsync();\n  }\n}\n\nexport async function startAsync(\n  node: ReactNativeNodeHandle | React.Component,\n  configuration: TrackingConfiguration\n): Promise<ARStartResult> {\n  let handle = typeof node === 'number' ? node : _getNodeHandle(node);\n  if (ExponentAR.startAsync) {\n    return await ExponentAR.startAsync(handle, configuration);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nfunction _getNodeHandle(component: React.Component): ReactNativeNodeHandle {\n  let handle = findNodeHandle(component);\n  if (handle === null) {\n    throw new Error(`Could not find the React node handle for the AR component: ${component}`);\n  }\n  return handle;\n}\n\nexport function reset() {\n  if (ExponentAR.reset) {\n    ExponentAR.reset();\n  }\n}\n\nexport function resume() {\n  if (ExponentAR.resume) {\n    ExponentAR.resume();\n  }\n}\n\nexport function pause() {\n  if (ExponentAR.pause) {\n    ExponentAR.pause();\n  }\n}\n\nexport async function setConfigurationAsync(configuration: TrackingConfiguration): Promise<void> {\n  if (ExponentAR.setConfigurationAsync) {\n    await ExponentAR.setConfigurationAsync(configuration);\n  }\n}\n\nexport function getProvidesAudioData(): boolean {\n  if (ExponentAR.getProvidesAudioData) {\n    return ExponentAR.getProvidesAudioData();\n  }\n  return false;\n}\n\nexport function setProvidesAudioData(providesAudioData: boolean): void {\n  if (ExponentAR.setProvidesAudioData) {\n    ExponentAR.setProvidesAudioData(providesAudioData);\n  }\n}\n\nexport function setPlaneDetection(planeDetection: PlaneDetection): void {\n  if (ExponentAR.setPlaneDetection) {\n    ExponentAR.setPlaneDetection(planeDetection);\n  }\n}\n\nexport function getPlaneDetection(): PlaneDetection {\n  if (ExponentAR.getPlaneDetection) {\n    return ExponentAR.getPlaneDetection();\n  }\n  throw new Error(`AR plane detection is not supported on this device`);\n}\n\nexport function getCameraTexture(): number {\n  if (ExponentAR.getCameraTexture) {\n    return ExponentAR.getCameraTexture();\n  }\n  throw new Error(`AR camera textures are not supported on this device`);\n}\n\nexport async function setWorldOriginAsync(matrix_float4x4: Matrix): Promise<void> {\n  if (ExponentAR.setWorldOriginAsync) {\n    await ExponentAR.setWorldOriginAsync(matrix_float4x4);\n  }\n}\n\nexport function setLightEstimationEnabled(isLightEstimationEnabled: boolean) {\n  if (ExponentAR.setLightEstimationEnabled) {\n    ExponentAR.setLightEstimationEnabled(isLightEstimationEnabled);\n  }\n}\n\nexport function getLightEstimationEnabled(): boolean {\n  if (ExponentAR.getLightEstimationEnabled) {\n    return ExponentAR.getLightEstimationEnabled();\n  }\n  return false;\n}\n\nexport function setAutoFocusEnabled(isAutoFocusEnabled: boolean): void {\n  if (ExponentAR.setAutoFocusEnabled) {\n    ExponentAR.setAutoFocusEnabled(isAutoFocusEnabled);\n  }\n}\n\nexport function getAutoFocusEnabled(): boolean {\n  if (ExponentAR.getAutoFocusEnabled) {\n    return ExponentAR.getAutoFocusEnabled();\n  }\n  return false;\n}\n\nexport function setWorldAlignment(worldAlignment: WorldAlignment): void {\n  if (ExponentAR.setWorldAlignment) {\n    ExponentAR.setWorldAlignment(worldAlignment);\n  }\n}\n\nexport function getWorldAlignment(): WorldAlignment {\n  if (ExponentAR.getWorldAlignment) {\n    return ExponentAR.getWorldAlignment();\n  }\n  throw new Error(`AR world alignment is not supported on this device`);\n}\n\nexport function isConfigurationAvailable(configuration: TrackingConfiguration): boolean {\n  const { width, height } = Dimensions.get('window');\n  // @ts-ignore: re-evaluate this for the new iPhones (2018)\n  const isX = (width === 812 || height === 812) && !Platform.isTVOS && !Platform.isPad;\n  if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {\n    return true;\n  }\n  return !!ExponentAR[configuration];\n}\n\nexport function getSupportedVideoFormats(configuration: TrackingConfiguration): VideoFormat[] {\n  const videoFormats = {\n    [TrackingConfiguration.World]: 'WorldTrackingVideoFormats',\n    [TrackingConfiguration.Orientation]: 'OrientationTrackingVideoFormats',\n    [TrackingConfiguration.Face]: 'FaceTrackingVideoFormats',\n  };\n  const videoFormat = videoFormats[configuration];\n  return ExponentAR[videoFormat] || [];\n}\n\nexport function isFrontCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.Face);\n}\n\nexport function isRearCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.World);\n}\n\n/* Legacy constants */\n\n/**\n * A deprecated alias for `PlaneDetection`\n * July 8, 2019\n */\nexport const PlaneDetectionTypes = PlaneDetection;\n/**\n * A deprecated alias for `WorldAlignment`\n * July 8, 2019\n */\nexport const WorldAlignmentTypes = WorldAlignment;\n/**\n * A deprecated alias for `EventType`\n * July 8, 2019\n */\nexport const EventTypes = EventType;\n/**\n * A deprecated alias for `AnchorType`\n * July 8, 2019\n */\nexport const AnchorTypes = AnchorType;\n/**\n * A deprecated alias for `AnchorEventType`\n * July 8, 2019\n */\nexport const AnchorEventTypes = AnchorEventType;\n/**\n * A deprecated alias for `FrameAttribute`\n * July 8, 2019\n */\nexport const FrameAttributes = FrameAttribute;\n/**\n * A deprecated alias for `TrackingState`\n * July 8, 2019\n */\nexport const TrackingStates = TrackingState;\n/**\n * A deprecated alias for `TrackingStateReason`\n * July 8, 2019\n */\nexport const TrackingStateReasons = TrackingStateReason;\n/**\n * A deprecated alias for `TrackingConfiguration`\n * July 8, 2019\n */\nexport const TrackingConfigurations = TrackingConfiguration;\n"]}